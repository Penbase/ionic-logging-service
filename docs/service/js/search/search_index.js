var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AjaxAppender.html",[0,0.296,1,1.106]],["body/classes/AjaxAppender.html",[0,0.197,1,1.364,2,0.738,3,0.29,4,0.24,5,0.197,6,3.457,7,0.951,8,0.697,9,1.561,10,2.275,11,0.8,12,1.205,13,2.607,14,2.275,15,2.809,16,1.923,17,1.084,18,1.45,19,0.05,20,3.498,21,2.809,22,3.32,23,2.809,24,3.32,25,2.809,26,0.938,27,0.157,28,0.802,29,1.961,30,3.404,31,0.995,32,2.25,33,1.275,34,3.808,35,3.808,36,3.808,37,3.808,38,2.809,39,2.809,40,2.809,41,2.25,42,0.738,43,1.66,44,2.319,45,1.807,46,1.843,47,1.275,48,1.743,49,1.126,50,1.8,51,1.539,52,0.496,53,0.786,54,3.084,55,1.843,56,1.966,57,2.275,58,2.607,59,1.351,60,0.591,61,1.66,62,2.012,63,1.843,64,1.66,65,1.126,66,1.66,67,1.66,68,2.081,69,1.94,70,1.45,71,1.843,72,1.45,73,1.126,74,1.275,75,1.275,76,1.66,77,1.923,78,1.275,79,1.843,80,1.244,81,2.275,82,3.75,83,3.084,84,1.843,85,2.809,86,1.126,87,2.25,88,1.966,89,2.25,90,2.25,91,3.404,92,1.843,93,2.737,94,4.099,95,4.099,96,1.843,97,3.808,98,2.607,99,3.084,100,3.808,101,3.084,102,3.808,103,2.809,104,1.843,105,4.32,106,2.809,107,2.809,108,2.809,109,1.843,110,2.809,111,1.843,112,2.809,113,2.275,114,1.843,115,1.275,116,0.528,117,1.049,118,1.089,119,0.995,120,1.261,121,0.951,122,0.576,123,0.837,124,0.197,125,1.089,126,1.089,127,1.643,128,1.757,129,1.843,130,1.261,131,1.843,132,2.275,133,1.089,134,0.286,135,1.731,136,1.089,137,1.757,138,1.261,139,1.923,140,4.099,141,2.809,142,2.809,143,1.843,144,2.809,145,1.843,146,1.843,147,1.843,148,1.843,149,1.843,150,1.843,151,1.843,152,1.843,153,1.843,154,1.843,155,1.843,156,1.089,157,1.261,158,0.951,159,2.809,160,1.843,161,1.66,162,1.843,163,2.809,164,1.843,165,1.261,166,1.843,167,0.837,168,1.843,169,0.738,170,0.951,171,0.951,172,1.089,173,1.089,174,1.843,175,1.53,176,1.843,177,1.843,178,1.843,179,1.843,180,1.843,181,1.843,182,1.843,183,1.843,184,0.016,185,0.024,186,0.016]],["title/interfaces/AjaxAppenderConfiguration.html",[44,1.425,187,0.36]],["body/interfaces/AjaxAppenderConfiguration.html",[1,1.385,3,0.407,4,0.451,5,0.37,6,2.366,8,0.537,11,0.779,12,1.212,17,0.728,19,0.049,20,4.279,22,4.064,24,4.064,26,1.455,27,0.295,28,0.918,44,2.251,52,0.538,53,0.961,58,2.986,59,1.364,60,0.918,80,1.311,81,4.064,82,3.532,83,3.532,99,3.532,101,3.532,113,3.532,116,0.82,124,0.37,130,2.986,132,4.064,134,0.779,184,0.03,185,0.037,186,0.03,187,0.451,188,1.224,189,1.569,190,1.455,191,2.251,192,1.748,193,1.201,194,1.364,195,1.364,196,1.748,197,4.362,198,4.362,199,2.986]],["title/interfaces/BrowserConsoleAppenderConfiguration.html",[187,0.36,200,1.631]],["body/interfaces/BrowserConsoleAppenderConfiguration.html",[3,0.435,4,0.525,5,0.431,8,0.625,17,0.847,19,0.049,26,1.509,27,0.343,28,1.008,52,0.431,53,0.871,60,1.008,116,0.793,124,0.431,134,0.743,184,0.034,185,0.041,186,0.034,187,0.525,188,1.425,189,1.827,190,1.319,191,2.471,192,1.918,193,1.457,194,1.497,195,1.497,200,2.829,201,3.258,202,2.077,203,2.378]],["title/classes/IonicStorageAppender.html",[0,0.296,204,1.253]],["body/classes/IonicStorageAppender.html",[0,0.159,2,0.594,3,0.252,4,0.193,5,0.159,7,0.765,8,0.612,9,1.479,11,0.721,12,1.294,16,1.622,17,1.058,18,1.746,19,0.05,26,0.816,27,0.126,28,0.499,29,1.897,31,0.839,32,1.999,33,1.536,41,1.999,42,0.594,43,1.4,45,1.724,47,1.076,48,1.645,49,1.482,50,1.581,51,1.423,52,0.423,53,0.717,56,1.529,59,1.058,60,0.499,61,1.4,62,1.75,64,1.4,65,0.95,66,1.4,67,1.4,68,1.862,69,0.95,70,1.223,72,1.223,73,0.95,74,1.076,75,1.791,76,1.4,77,1.622,78,1.076,80,1.143,86,1.356,87,2.331,88,2.036,89,2.331,90,2.331,93,1.999,115,1.536,116,0.721,117,1.141,119,0.839,121,0.765,122,0.463,123,0.673,124,0.159,125,0.876,126,0.876,127,1.66,128,2.29,133,0.876,134,0.23,135,1.581,136,0.876,137,1.529,138,1.015,139,1.622,156,0.876,157,1.015,158,0.765,161,0.876,165,1.015,167,0.673,169,1.356,170,0.765,171,0.765,172,0.876,173,0.876,175,1.571,184,0.013,185,0.02,186,0.013,192,0.95,196,0.95,204,1.076,205,3.289,206,1.967,207,1.999,208,2.594,209,2.211,210,2.37,211,2.37,212,1.919,213,2.398,214,2.349,215,1.919,216,3.114,217,1.919,218,1.356,219,1.919,220,4.104,221,2.739,222,3.383,223,1.999,224,2.316,225,3.383,226,1.919,227,1.4,228,1.622,229,2.221,230,1.482,231,2.37,232,2.961,233,2.027,234,1.482,235,3.684,236,1.482,237,1.622,238,1.482,239,1.482,240,1.4,241,1.482,242,1.951,243,1.66,244,1.482,245,1.791,246,1.482,247,2.37,248,2.37,249,1.482,250,1.919,251,2.739,252,2.37,253,1.2,254,1.999,255,1.622,256,1.482,257,1.622,258,1.622,259,2.447,260,1.622,261,2.316,262,1.4,263,1.482,264,0.594,265,0.765,266,0.876,267,1.2,268,1.482,269,1.482,270,1.482,271,1.999,272,1.746,273,1.919,274,2.398,275,1.919,276,3.699,277,2.37,278,1.482,279,2.961,280,1.015,281,0.673,282,2.398,283,1.529,284,1.4,285,1.4,286,3.114,287,2.996,288,2.37,289,1.482,290,1.482,291,1.2,292,1.2,293,1.2,294,1.2,295,1.482,296,1.482,297,1.2,298,1.2,299,2.027,300,1.482,301,1.482,302,2.37,303,1.75,304,1.482,305,1.482,306,1.482,307,1.482,308,1.4,309,2.37,310,1.015,311,1.015,312,2.37,313,0.876,314,1.015,315,1.015,316,2.027,317,2.7,318,1.622,319,0.876,320,0.525,321,1.015,322,0.463,323,1.015,324,1.015,325,1.015,326,0.673,327,1.015,328,0.876,329,1.015,330,1.015,331,1.919,332,2.37,333,1.482,334,1.482,335,1.482,336,1.015,337,1.2,338,1.2,339,1.482,340,1.482,341,1.482]],["title/interfaces/IonicStorageAppenderConfiguration.html",[187,0.36,229,1.425]],["body/interfaces/IonicStorageAppenderConfiguration.html",[3,0.418,4,0.478,5,0.392,8,0.568,9,1.414,11,0.702,12,1.237,17,0.771,19,0.049,26,1.476,27,0.312,28,0.952,52,0.525,53,0.932,60,0.952,80,1.271,86,1.812,116,0.832,124,0.392,134,0.795,184,0.031,185,0.039,186,0.031,187,0.478,188,1.297,189,1.663,190,1.411,191,2.334,192,1.812,193,1.245,194,1.414,195,1.414,204,1.663,205,2.507,206,1.737,208,2.334,214,2.334,216,3.506,218,2.053,229,2.334,240,2.672,242,1.812,245,2.053,281,2.053]],["title/classes/LocalStorageAppender.html",[0,0.296,342,1.106]],["body/classes/LocalStorageAppender.html",[0,0.175,2,0.653,3,0.268,4,0.212,5,0.175,7,0.841,8,0.667,9,1.463,11,0.74,12,1.309,16,1.749,17,1.058,18,1.841,19,0.05,26,0.868,27,0.139,28,0.538,29,1.9,31,0.905,32,2.108,33,1.619,41,2.108,42,0.653,43,1.509,45,1.741,47,1.16,48,1.689,49,1.024,50,1.647,51,1.463,52,0.44,53,0.747,56,1.626,59,1.115,61,1.509,62,1.862,64,1.509,65,1.024,66,1.509,67,1.509,68,1.875,69,1.875,70,1.319,72,1.319,73,1.024,74,1.16,75,1.866,76,1.509,77,1.749,78,1.16,80,1.171,86,1.429,87,2.428,88,2.121,89,2.428,90,2.428,93,2.108,115,1.619,116,0.74,117,1.067,119,0.905,121,0.841,122,0.51,123,0.74,124,0.175,125,0.963,126,0.963,127,1.552,128,2.296,133,0.963,134,0.253,135,1.647,136,0.963,137,1.626,138,1.115,139,1.749,156,0.963,157,1.115,158,0.841,161,1.509,165,1.115,167,0.74,169,1.262,170,0.841,171,0.841,172,0.963,173,0.963,175,1.575,184,0.014,185,0.022,186,0.014,192,1.024,196,1.024,206,1.938,207,2.108,209,2.384,212,2.069,213,2.551,214,2.502,215,2.069,217,2.069,218,1.429,219,2.069,221,2.888,223,2.108,224,2.441,226,2.069,227,1.509,228,1.749,237,1.749,240,1.509,242,1.994,243,1.833,245,1.866,250,2.069,251,2.888,253,1.32,254,2.108,255,1.749,257,1.749,258,1.749,259,2.539,260,1.749,261,2.441,262,1.509,264,0.653,265,0.841,266,0.963,271,2.108,272,1.841,273,2.069,274,2.551,275,2.069,280,1.115,281,0.74,283,1.319,284,1.509,285,1.509,286,3.203,291,1.32,292,1.32,293,1.32,294,1.32,297,1.32,298,1.32,299,2.157,310,1.749,311,1.115,313,0.963,314,1.115,315,1.115,316,2.157,317,2.813,318,1.749,319,0.963,320,0.577,321,1.115,322,0.51,323,1.115,324,1.115,325,1.115,326,0.74,327,1.115,328,0.963,329,1.115,330,1.115,331,2.069,336,1.115,337,1.32,338,2.069,342,1.024,343,3.318,344,1.749,345,3.265,346,3.567,347,2.218,348,1.32,349,1.32,350,1.629,351,1.629,352,1.629,353,1.629,354,1.629,355,2.554,356,1.629,357,2.554,358,1.629,359,1.629,360,4.11,361,2.554,362,3.151,363,1.629,364,1.629,365,1.629,366,1.629,367,1.629,368,1.629,369,2.069,370,2.554,371,1.629,372,1.629]],["title/interfaces/LocalStorageAppenderConfiguration.html",[187,0.36,347,1.425]],["body/interfaces/LocalStorageAppenderConfiguration.html",[3,0.418,4,0.478,5,0.392,8,0.568,9,1.414,11,0.702,12,1.237,17,0.771,19,0.049,26,1.476,27,0.312,28,0.952,52,0.525,53,0.932,60,0.952,80,1.271,86,1.812,116,0.832,124,0.392,134,0.795,184,0.031,185,0.039,186,0.031,187,0.478,188,1.297,189,1.663,190,1.411,191,2.334,192,1.812,193,1.245,194,1.414,195,1.414,206,1.737,209,2.053,214,2.334,218,2.053,240,2.672,242,1.812,245,2.053,281,2.053,342,1.467,343,2.507,345,3.506,347,2.334]],["title/classes/LogLevelConverter.html",[0,0.296,122,0.863]],["body/classes/LogLevelConverter.html",[0,0.455,2,1.09,3,0.317,4,0.355,5,0.291,8,0.659,11,0.659,19,0.049,27,0.232,29,1.504,31,1.319,45,1.504,48,1.504,50,1.702,51,1.328,52,0.584,53,0.772,60,0.572,68,1.702,78,2.424,116,0.786,117,1.026,119,1.319,122,1.165,124,0.291,128,2.698,134,0.422,135,1.702,137,2.193,175,2.005,184,0.023,185,0.032,186,0.023,190,1.17,193,0.749,194,0.85,195,0.85,264,2.184,265,1.404,320,1.949,373,2.7,374,2.202,375,3.724,376,3.724,377,1.922,378,2.549,379,3.724,380,3.724,381,3.724,382,3.724,383,5.227,384,2.719,385,4.942,386,3.655,387,3.7,388,3.724,389,2.719,390,4.569,391,3.724,392,2.719,393,4.248,394,4.562,395,3.724,396,4.248,397,3.724,398,4.248,399,3.724,400,4.248,401,3.724,402,4.248,403,3.724,404,4.248,405,3.724,406,4.248,407,3.724,408,4.248,409,3.724,410,4.248,411,3.44]],["title/interfaces/LogMessage.html",[187,0.36,243,1.106]],["body/interfaces/LogMessage.html",[3,0.32,4,0.489,5,0.402,8,0.582,11,0.823,19,0.049,27,0.32,28,0.966,51,1.435,52,0.568,59,1.737,65,1.839,98,3.142,116,0.875,124,0.402,184,0.032,185,0.039,186,0.032,187,0.489,188,1.329,243,1.839,320,1.909,322,1.686,326,2.345,328,3.053,373,2.217,412,3.039,413,3.536,414,4.959]],["title/classes/Logger.html",[0,0.296,322,0.863]],["body/classes/Logger.html",[0,0.171,2,0.638,3,0.387,4,0.208,5,0.171,8,0.722,11,0.722,12,0.606,18,2.608,19,0.05,27,0.136,29,1.946,31,0.889,42,0.638,45,1.731,47,1.139,48,1.247,49,1.006,50,2.177,51,1.699,52,0.508,53,0.976,59,1.507,60,0.807,65,2.127,68,2.005,69,2.058,75,1.139,80,0.385,88,1.295,116,0.843,117,0.855,119,0.889,122,0.498,123,0.723,124,0.171,127,0.638,134,0.547,135,2.136,167,1.599,169,2.025,175,1.508,184,0.014,185,0.021,186,0.014,193,1.216,194,1.102,195,1.102,196,1.006,199,3.459,264,1.631,265,0.822,283,0.822,303,0.941,308,0.941,320,1.908,322,1.529,326,2.41,386,1.718,415,1.29,416,2.032,417,3.103,418,3.103,419,2.509,420,3.523,421,3.523,422,2.509,423,2.509,424,1.593,425,1.09,426,2.509,427,5.534,428,1.593,429,4.214,430,5.053,431,5.053,432,2.509,433,1.593,434,2.509,435,1.593,436,2.509,437,1.593,438,2.509,439,1.593,440,2.509,441,1.593,442,2.509,443,2.509,444,3.832,445,1.593,446,2.509,447,2.514,448,1.593,449,2.509,450,1.593,451,2.509,452,1.593,453,2.509,454,1.593,455,2.509,456,1.593,457,2.853,458,1.29,459,1.593,460,1.593,461,1.593,462,1.593,463,5.053,464,4.414,465,1.593,466,3.105,467,1.593,468,3.105,469,3.105,470,1.593,471,1.593,472,1.593,473,1.593,474,1.593,475,1.593,476,2.509,477,1.593,478,1.593,479,1.593,480,1.593,481,1.09,482,1.593]],["title/injectables/LoggingService.html",[483,1.631,484,1.425]],["body/injectables/LoggingService.html",[0,0.154,1,1.162,3,0.122,4,0.187,5,0.154,8,0.635,9,1.279,11,0.831,12,1.289,13,1.582,14,1.872,17,0.895,19,0.05,26,0.915,27,0.122,28,0.486,29,1.912,31,0.818,33,1.993,42,1.162,45,1.712,47,1.049,48,1.733,49,0.926,50,1.639,51,1.491,52,0.456,53,0.707,54,3.312,56,1.88,57,2.691,58,1.582,59,1.33,60,0.486,68,1.961,69,1.331,70,1.193,72,1.193,73,1.459,74,1.049,75,2.046,78,1.049,80,0.558,86,0.926,115,1.766,116,0.768,117,1.268,118,0.849,119,1.027,120,1.985,122,0.449,123,0.652,124,0.154,127,1.331,134,0.359,135,1.639,137,0.742,158,0.742,167,1.857,169,1.845,170,0.742,171,0.742,175,1.595,184,0.012,185,0.02,186,0.012,190,0.637,193,0.637,196,0.926,202,0.742,203,1.963,204,2.164,206,1.784,208,1.497,209,1.766,214,2.526,216,2.274,218,0.926,220,3.555,223,1.963,227,1.963,233,1.582,235,2.691,237,2.274,242,0.576,243,1.459,254,1.366,259,1.366,262,1.963,266,0.849,267,1.163,271,0.849,272,0.742,282,1.872,283,2.111,284,0.849,285,0.849,287,2.348,303,0.849,308,0.849,313,1.366,320,1.289,322,1.635,342,1.961,345,2.663,369,1.872,377,1.193,386,1.582,394,1.163,411,1.163,413,2.911,425,1.582,447,1.163,458,1.872,481,0.983,483,1.366,484,1.193,485,1.437,486,1.163,487,2.691,488,2.311,489,1.872,490,2.691,491,2.911,492,1.88,493,1.872,494,2.311,495,2.9,496,2.9,497,3.323,498,3.323,499,2.311,500,2.311,501,2.311,502,3.323,503,2.311,504,2.311,505,1.437,506,1.963,507,1.437,508,1.437,509,3.323,510,3.15,511,1.437,512,2.311,513,1.437,514,2.311,515,2.311,516,2.311,517,1.872,518,1.437,519,2.311,520,2.311,521,1.872,522,2.311,523,2.311,524,2.311,525,1.437,526,3.323,527,2.311,528,1.437,529,1.437,530,1.582,531,2.311,532,1.437,533,2.311,534,1.437,535,2.311,536,1.437,537,1.437,538,1.437,539,2.311,540,1.872,541,2.311,542,2.311,543,1.963,544,2.311,545,2.311,546,3.323,547,1.437,548,1.437,549,1.437,550,1.437,551,2.311,552,1.437,553,1.437,554,1.437,555,1.163,556,1.437,557,1.437,558,1.437,559,1.437,560,1.437,561,1.437,562,1.437,563,1.437,564,1.163,565,1.437,566,1.437,567,1.437,568,2.311,569,2.311,570,2.311,571,1.437,572,1.437,573,1.437,574,1.437,575,1.437,576,1.437,577,1.437,578,3.641,579,1.437,580,1.437,581,2.9,582,2.9,583,3.323,584,2.311,585,2.9,586,1.437,587,1.437,588,1.437,589,1.437,590,1.437,591,1.437,592,1.437,593,1.437,594,1.437,595,1.437,596,1.437,597,1.437,598,1.437,599,1.437,600,1.437,601,1.437,602,1.437,603,1.437,604,1.163,605,1.437,606,1.437,607,1.437,608,1.437,609,1.437,610,1.437,611,2.311,612,1.437,613,1.437,614,1.437,615,1.437,616,1.437,617,1.437,618,1.437,619,1.437,620,1.437,621,1.437,622,1.437,623,1.437,624,1.437,625,1.437,626,1.437,627,1.437,628,1.437,629,1.437,630,1.437,631,1.437]],["title/interfaces/LoggingServiceConfiguration.html",[187,0.36,506,1.631]],["body/interfaces/LoggingServiceConfiguration.html",[1,2.095,3,0.283,4,0.433,5,0.356,8,0.516,11,0.66,17,0.895,19,0.05,27,0.283,28,0.895,44,2.553,52,0.56,53,1.009,117,1.408,120,2.273,121,2.639,124,0.356,134,0.66,184,0.028,185,0.036,186,0.028,187,0.433,188,1.176,190,1.171,200,2.922,202,1.714,203,3.09,204,2.374,206,1.506,208,1.714,209,1.508,229,2.553,342,2.095,347,2.553,377,2.195,378,2.91,484,2.195,490,4.439,491,2.91,492,2.095,506,2.512,530,2.91,543,1.962,564,2.689,632,2.273,633,2.689,634,4.252,635,4.252,636,4.004,637,3.798,638,2.553]],["title/modules/LoggingServiceModule.html",[639,2.236,640,1.631]],["body/modules/LoggingServiceModule.html",[0,0.456,3,0.363,4,0.555,5,0.456,19,0.049,117,1.172,118,2.515,124,0.456,184,0.036,185,0.042,186,0.036,632,2.914,640,2.924,641,2.914,642,4.256,643,4.007,644,3.447,645,4.256,646,4.256]],["title/classes/MemoryAppender.html",[0,0.296,492,1.106]],["body/classes/MemoryAppender.html",[0,0.207,2,0.773,3,0.164,4,0.252,5,0.207,7,0.996,8,0.683,9,1.532,11,0.709,12,1.287,17,1.102,18,1.502,19,0.05,26,0.965,27,0.164,28,0.612,29,1.927,31,1.03,32,2.304,33,1.321,41,2.304,42,0.773,43,1.719,45,1.762,47,1.321,48,1.785,49,1.166,50,1.676,51,1.503,52,0.448,53,0.761,56,1.808,59,1.532,61,1.719,62,2.069,64,1.719,65,1.166,66,1.719,67,2.304,68,1.882,69,2.043,70,1.502,72,1.502,73,1.166,74,1.321,75,1.321,76,1.719,78,1.321,80,1.218,87,1.719,88,1.502,89,1.719,90,1.719,93,2.304,98,1.992,115,1.77,116,0.452,117,1.152,119,1.03,121,0.996,122,0.603,123,0.876,124,0.207,125,1.14,126,1.14,127,1.676,128,1.502,133,1.14,135,1.676,136,1.14,156,1.14,158,0.996,161,1.719,167,1.321,169,1.166,170,0.996,171,0.996,172,1.14,173,1.14,175,1.481,184,0.017,185,0.025,186,0.017,190,0.801,196,1.166,207,2.304,218,1.562,223,2.304,224,2.669,227,2.304,228,1.992,242,1.963,243,1.882,245,1.996,254,2.304,255,1.992,257,1.992,258,1.992,259,2.599,260,1.992,261,2.669,262,1.719,264,0.773,265,0.996,266,1.14,271,1.719,272,1.502,280,1.321,281,1.59,283,0.996,284,1.719,285,1.719,286,2.669,299,1.992,310,1.992,311,1.321,313,1.14,314,1.321,315,1.321,316,2.397,317,3.01,318,1.321,319,1.14,320,0.683,321,1.321,322,0.603,323,1.321,324,1.321,325,1.321,326,0.876,327,1.321,328,1.14,329,1.321,330,1.321,336,1.321,344,1.992,348,1.563,349,1.563,425,1.321,492,1.762,543,2.94,555,2.356,604,1.563,638,2.356,647,3.353,648,2.91,649,2.91,650,2.91,651,2.356,652,2.91,653,1.93,654,1.93,655,1.93,656,1.93,657,1.93,658,2.91,659,1.93,660,2.91,661,4.564,662,3.157,663,2.356,664,2.356,665,2.91,666,2.356,667,1.93,668,1.93,669,2.91,670,1.93,671,1.563,672,1.93,673,2.91,674,1.93,675,2.91]],["title/interfaces/MemoryAppenderConfiguration.html",[187,0.36,638,1.425]],["body/interfaces/MemoryAppenderConfiguration.html",[3,0.426,4,0.499,5,0.41,8,0.594,9,1.453,11,0.721,12,1.122,17,0.806,19,0.049,26,1.492,27,0.326,28,0.978,52,0.498,53,0.946,60,0.978,80,1.287,116,0.776,124,0.41,134,0.721,184,0.033,185,0.04,186,0.033,187,0.499,188,1.355,189,1.738,190,1.433,191,2.398,192,1.862,193,1.28,194,1.453,195,1.453,218,2.084,242,1.862,245,2.109,281,2.109,492,1.534,638,2.398,647,2.62]],["title/coverage.html",[676,3.047]],["body/coverage.html",[0,0.575,1,1.479,5,0.395,6,3.11,7,2.652,19,0.049,44,1.906,48,1.307,52,0.395,122,1.154,184,0.032,185,0.039,186,0.032,187,0.71,189,2.395,200,2.181,201,2.989,202,1.906,204,1.676,205,3.11,206,1.819,229,1.906,243,1.479,322,1.154,342,1.479,343,3.11,347,1.906,373,2.685,374,2.989,412,2.989,415,2.989,483,2.181,484,1.906,486,2.989,492,1.479,506,2.181,632,2.527,633,2.989,638,1.906,647,3.11,676,2.989,677,2.989,678,3.692,679,3.692,680,5.647,681,3.692,682,4.544,683,3.692,684,4.923,685,3.692,686,3.692,687,3.692,688,3.692,689,3.692,690,3.692,691,3.692,692,3.692,693,3.692,694,3.692]],["title/dependencies.html",[695,2.308,696,2.272]],["body/dependencies.html",[19,0.047,118,2.593,119,1.554,184,0.038,185,0.043,186,0.038,696,3.447,697,4.387,698,4.387,699,4.387,700,4.078]],["title/miscellaneous/enumerations.html",[701,1.869,702,2.688]],["body/miscellaneous/enumerations.html",[3,0.37,19,0.043,27,0.37,60,0.915,73,1.741,134,0.675,184,0.037,185,0.043,186,0.037,193,1.197,194,1.359,195,1.359,264,2.007,373,2.568,377,2.243,701,3.519,702,3.519,703,4.346,704,5.008]],["title/index.html",[27,0.197,705,2.308,706,2.308]],["body/index.html",[0,0.447,1,1.775,3,0.407,9,1.304,10,2.609,11,0.825,12,1.223,13,2.205,17,0.878,19,0.049,27,0.189,29,0.784,31,0.784,33,1.893,42,0.888,45,0.784,49,0.888,51,0.693,52,0.407,59,1.187,60,0.933,65,0.888,69,0.888,73,1.959,74,1.006,80,0.917,86,1.291,115,1.006,116,0.344,117,0.887,124,0.447,127,0.888,134,0.647,169,1.522,175,1.141,184,0.028,185,0.028,186,0.019,190,0.887,193,1.273,194,1.304,195,1.385,196,0.888,199,2.599,202,2.152,203,2.464,206,1.141,207,1.904,208,2.573,209,1.463,233,2.205,264,1.291,272,1.143,303,1.309,308,1.309,319,1.904,320,1.854,322,1.637,326,1.463,342,1.522,344,2.599,377,1.96,378,1.516,387,1.794,413,1.516,416,1.794,417,2.609,418,2.609,429,2.609,457,1.794,481,2.599,484,2.387,487,3.377,489,2.609,491,2.854,492,1.775,493,2.609,510,1.794,517,2.609,521,3.075,530,2.854,540,1.794,543,1.904,636,3.075,637,1.794,640,1.904,643,1.794,644,1.794,651,1.794,662,3.075,663,1.794,664,3.377,666,1.794,671,1.794,677,1.794,696,1.516,700,2.609,707,2.215,708,2.215,709,3.222,710,2.215,711,4.17,712,2.215,713,2.215,714,3.222,715,2.215,716,2.215,717,3.222,718,2.215,719,2.215,720,2.215,721,2.215,722,2.215,723,2.215,724,3.222,725,2.215,726,2.215,727,2.215,728,2.215,729,2.215,730,2.215,731,2.215,732,2.215,733,2.215,734,3.222,735,3.222,736,2.215,737,2.215,738,2.215,739,3.222,740,3.222,741,2.215,742,3.222,743,4.17,744,2.215,745,2.215,746,3.222,747,4.17,748,2.215,749,2.215,750,3.797,751,3.222,752,3.222,753,2.215,754,4.17,755,2.215,756,2.215,757,2.215,758,2.215,759,4.431,760,2.215,761,3.222,762,2.215,763,2.215,764,2.215,765,2.215,766,2.215,767,2.215,768,2.215,769,2.215,770,2.215,771,2.215,772,3.222,773,3.222,774,2.215,775,2.215,776,2.215,777,2.215,778,2.215,779,3.222,780,2.215,781,2.215,782,2.215,783,2.215,784,2.215,785,2.215,786,3.222,787,2.215,788,3.222,789,2.215,790,3.222,791,2.215,792,2.215,793,3.222,794,2.215,795,2.215,796,3.222,797,3.222,798,3.222,799,2.215,800,2.215,801,3.222,802,2.215,803,3.797,804,2.215,805,2.215,806,2.215,807,2.215,808,2.215,809,2.215,810,2.215,811,2.215,812,2.215,813,2.215,814,2.215,815,2.215,816,2.215,817,2.215,818,2.215,819,2.215,820,2.215,821,2.215,822,2.215,823,2.215,824,2.215,825,3.222,826,3.222,827,2.215,828,2.215,829,3.222,830,2.215,831,2.215,832,2.215,833,2.215,834,2.215,835,2.215,836,2.215,837,2.215,838,2.215,839,2.215,840,2.215,841,2.215,842,2.215,843,2.215,844,2.215,845,2.215,846,2.215,847,2.215,848,3.222,849,2.215,850,2.215,851,2.215,852,3.222,853,2.215,854,3.222]],["title/modules.html",[641,2.576]],["body/modules.html",[19,0.044,184,0.038,185,0.044,186,0.038,640,2.638,641,3.056,855,4.465]],["title/overview.html",[856,3.047]],["body/overview.html",[2,1.768,19,0.043,130,3.458,184,0.038,185,0.043,186,0.038,188,1.563,483,2.608,639,3.574,856,3.574,857,4.413,858,4.413]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":132,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["1",{"_index":130,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"overview.html":{}}}],["1.2.1",{"_index":727,"title":{},"body":{"index.html":{}}}],["1.4.15",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":23,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["10/10",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["13/15",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["18:49:43.794",{"_index":758,"title":{},"body":{"index.html":{}}}],["18:49:43.797",{"_index":760,"title":{},"body":{"index.html":{}}}],["18:49:43.801",{"_index":761,"title":{},"body":{"index.html":{}}}],["18:49:43.814",{"_index":764,"title":{},"body":{"index.html":{}}}],["2",{"_index":765,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":724,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":725,"title":{},"body":{"index.html":{}}}],["2.2.1",{"_index":728,"title":{},"body":{"index.html":{}}}],["2.4.8",{"_index":726,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":281,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["3.0.0",{"_index":723,"title":{},"body":{"index.html":{}}}],["3.1.0",{"_index":722,"title":{},"body":{"index.html":{}}}],["3.9.0",{"_index":720,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":711,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":762,"title":{},"body":{"index.html":{}}}],["5",{"_index":766,"title":{},"body":{"index.html":{}}}],["5.0.0",{"_index":721,"title":{},"body":{"index.html":{}}}],["5.1.0",{"_index":719,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":219,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["6",{"_index":857,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":717,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":25,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["7",{"_index":858,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":700,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["7/7",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":151,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["86",{"_index":689,"title":{},"body":{"coverage.html":{}}}],["99]logger",{"_index":767,"title":{},"body":{"index.html":{}}}],["a.b",{"_index":791,"title":{},"body":{"index.html":{}}}],["a.b.c",{"_index":790,"title":{},"body":{"index.html":{}}}],["a.b.c.d",{"_index":788,"title":{},"body":{"index.html":{}}}],["a.tostring",{"_index":603,"title":{},"body":{"injectables/LoggingService.html":{}}}],["add",{"_index":319,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["added",{"_index":542,"title":{},"body":{"injectables/LoggingService.html":{}}}],["additional",{"_index":852,"title":{},"body":{"index.html":{}}}],["additionally",{"_index":792,"title":{},"body":{"index.html":{}}}],["ajax",{"_index":120,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["ajaxappender",{"_index":1,"title":{"classes/AjaxAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["ajaxappender(configuration.ajaxappender",{"_index":590,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.appenderfailed.subscribe((message",{"_index":591,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.batchsizedefault",{"_index":160,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.thresholddefault",{"_index":162,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.timerintervaldefault",{"_index":164,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappenderconfiguration",{"_index":44,"title":{"interfaces/AjaxAppenderConfiguration.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["ajaxappenderfailed",{"_index":495,"title":{},"body":{"injectables/LoggingService.html":{}}}],["alerts",{"_index":556,"title":{},"body":{"injectables/LoggingService.html":{}}}],["allionicstorageappenders",{"_index":553,"title":{},"body":{"injectables/LoggingService.html":{}}}],["alllocalstorageappenders",{"_index":552,"title":{},"body":{"injectables/LoggingService.html":{}}}],["allows",{"_index":260,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["already",{"_index":313,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["amend",{"_index":494,"title":{},"body":{"injectables/LoggingService.html":{}}}],["angular",{"_index":715,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":118,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"dependencies.html":{}}}],["anything",{"_index":650,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["api",{"_index":854,"title":{},"body":{"index.html":{}}}],["app",{"_index":773,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":836,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":844,"title":{},"body":{"index.html":{}}}],["append",{"_index":32,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["append(loggingevent",{"_index":61,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appended",{"_index":67,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender",{"_index":9,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["appender's",{"_index":93,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration",{"_index":121,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration.ts",{"_index":189,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["appender.getionicstoragekey",{"_index":630,"title":{},"body":{"injectables/LoggingService.html":{}}}],["appender.getlocalstoragekey",{"_index":627,"title":{},"body":{"injectables/LoggingService.html":{}}}],["appender.model",{"_index":546,"title":{},"body":{"injectables/LoggingService.html":{}}}],["appender.model.ts",{"_index":7,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["appender.model.ts:101",{"_index":351,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:103",{"_index":63,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:104",{"_index":667,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:111",{"_index":656,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:112",{"_index":114,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:120",{"_index":84,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:121",{"_index":349,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:123",{"_index":238,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:127",{"_index":79,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:134",{"_index":655,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:135",{"_index":104,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:141",{"_index":657,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:142",{"_index":92,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:145",{"_index":359,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:148",{"_index":234,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:149",{"_index":109,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:150",{"_index":659,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:152",{"_index":352,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:156",{"_index":96,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:159",{"_index":354,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:164",{"_index":111,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:169",{"_index":358,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:173",{"_index":263,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:180",{"_index":239,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:187",{"_index":244,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:190",{"_index":353,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:197",{"_index":256,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:198",{"_index":350,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:218",{"_index":241,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:226",{"_index":236,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:25",{"_index":230,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:32",{"_index":55,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:34",{"_index":348,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:35",{"_index":46,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:61",{"_index":654,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:68",{"_index":249,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appender.model.ts:69",{"_index":356,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:78",{"_index":653,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:80",{"_index":71,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:89",{"_index":253,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:96",{"_index":246,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["appenderfailed",{"_index":30,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appenders",{"_index":510,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["appenders.find((a",{"_index":602,"title":{},"body":{"injectables/LoggingService.html":{}}}],["application/json",{"_index":149,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appmodule",{"_index":740,"title":{},"body":{"index.html":{}}}],["apps",{"_index":731,"title":{},"body":{"index.html":{}}}],["arg",{"_index":444,"title":{},"body":{"classes/Logger.html":{}}}],["arg.tostring",{"_index":476,"title":{},"body":{"classes/Logger.html":{}}}],["args",{"_index":463,"title":{},"body":{"classes/Logger.html":{}}}],["args.push(this.formatargument(param",{"_index":464,"title":{},"body":{"classes/Logger.html":{}}}],["argument",{"_index":443,"title":{},"body":{"classes/Logger.html":{}}}],["array",{"_index":637,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["assume",{"_index":232,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["async",{"_index":220,"title":{},"body":{"classes/IonicStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["automatically",{"_index":789,"title":{},"body":{"index.html":{}}}],["available",{"_index":804,"title":{},"body":{"index.html":{}}}],["await",{"_index":287,"title":{},"body":{"classes/IonicStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["backend",{"_index":825,"title":{},"body":{"index.html":{}}}],["batch",{"_index":106,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["batchsize",{"_index":22,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["batchsizedefault",{"_index":129,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["behind",{"_index":600,"title":{},"body":{"injectables/LoggingService.html":{}}}],["below",{"_index":744,"title":{},"body":{"index.html":{}}}],["beta",{"_index":718,"title":{},"body":{"index.html":{}}}],["between",{"_index":100,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["browse",{"_index":855,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":564,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["browser's",{"_index":344,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["browserconsoleappender",{"_index":203,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["browserconsoleappenderconfiguration",{"_index":200,"title":{"interfaces/BrowserConsoleAppenderConfiguration.html":{}},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["builds",{"_index":784,"title":{},"body":{"index.html":{}}}],["built",{"_index":732,"title":{},"body":{"index.html":{}}}],["c",{"_index":569,"title":{},"body":{"injectables/LoggingService.html":{}}}],["call",{"_index":829,"title":{},"body":{"index.html":{}}}],["callback",{"_index":661,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["called",{"_index":662,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["case",{"_index":394,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["catch",{"_index":308,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["catch(error",{"_index":340,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["change",{"_index":540,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["changed",{"_index":165,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["charset=utf",{"_index":150,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["class",{"_index":0,"title":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"overview.html":{}}}],["clearlog",{"_index":221,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["code",{"_index":746,"title":{},"body":{"index.html":{}}}],["complete",{"_index":797,"title":{},"body":{"index.html":{}}}],["component",{"_index":768,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":17,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["configuration.ajaxappender",{"_index":589,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.batchsize",{"_index":159,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.browserconsoleappender",{"_index":615,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.browserconsoleappender.threshold",{"_index":616,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.ionicstorageappender",{"_index":607,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.ionicstoragekey",{"_index":276,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["configuration.localstorageappender",{"_index":594,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstoragekey",{"_index":360,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["configuration.loglevels",{"_index":583,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.maxmessages",{"_index":310,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.memoryappender",{"_index":613,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.threshold",{"_index":161,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.timerinterval",{"_index":163,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.url",{"_index":140,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configure",{"_index":33,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["configure(configuration",{"_index":70,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["configure](#configure",{"_index":549,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configured",{"_index":509,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configurelogging",{"_index":846,"title":{},"body":{"index.html":{}}}],["configurelogging(loggingservice",{"_index":837,"title":{},"body":{"index.html":{}}}],["configures",{"_index":72,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["console",{"_index":202,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["console.error('clearlog',inspect(error",{"_index":341,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["console.log(\"configure",{"_index":584,"title":{},"body":{"injectables/LoggingService.html":{}}}],["console.log(\"initionicstorageappender",{"_index":301,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["console.log('append",{"_index":312,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["consolelogs",{"_index":823,"title":{},"body":{"index.html":{}}}],["const",{"_index":169,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor(configuration",{"_index":43,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["constructor(logger",{"_index":423,"title":{},"body":{"classes/Logger.html":{}}}],["convertedthreshold",{"_index":170,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["converting",{"_index":376,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["converts",{"_index":385,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["correspond",{"_index":805,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":676,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":559,"title":{},"body":{"injectables/LoggingService.html":{}}}],["creates",{"_index":47,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["creating",{"_index":515,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ctor",{"_index":750,"title":{},"body":{"index.html":{}}}],["current",{"_index":522,"title":{},"body":{"injectables/LoggingService.html":{}}}],["currently",{"_index":257,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["data",{"_index":78,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["database",{"_index":231,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["date",{"_index":414,"title":{},"body":{"interfaces/LogMessage.html":{}}}],["date(logmessage.timestamp",{"_index":294,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["debug",{"_index":193,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["debug(methodname",{"_index":426,"title":{},"body":{"classes/Logger.html":{}}}],["debugger",{"_index":565,"title":{},"body":{"injectables/LoggingService.html":{}}}],["declarations",{"_index":645,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["default",{"_index":190,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["define",{"_index":796,"title":{},"body":{"index.html":{}}}],["defined",{"_index":45,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["definition",{"_index":635,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["definitions",{"_index":847,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":696,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["depending",{"_index":74,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["deps",{"_index":840,"title":{},"body":{"index.html":{}}}],["derive",{"_index":531,"title":{},"body":{"injectables/LoggingService.html":{}}}],["describe",{"_index":771,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["development",{"_index":821,"title":{},"body":{"index.html":{}}}],["different",{"_index":378,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["disable",{"_index":812,"title":{},"body":{"index.html":{}}}],["disables",{"_index":814,"title":{},"body":{"index.html":{}}}],["display",{"_index":573,"title":{},"body":{"injectables/LoggingService.html":{}}}],["docs",{"_index":285,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["documentation",{"_index":677,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["done",{"_index":334,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["dotnet",{"_index":781,"title":{},"body":{"index.html":{}}}],["dots",{"_index":778,"title":{},"body":{"index.html":{}}}],["during",{"_index":820,"title":{},"body":{"index.html":{}}}],["e",{"_index":481,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["e.g",{"_index":747,"title":{},"body":{"index.html":{}}}],["e.message",{"_index":482,"title":{},"body":{"classes/Logger.html":{}}}],["each",{"_index":82,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["element",{"_index":315,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["emitter",{"_index":560,"title":{},"body":{"injectables/LoggingService.html":{}}}],["empty",{"_index":139,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["enable",{"_index":811,"title":{},"body":{"index.html":{}}}],["enabled",{"_index":648,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["encapsulates",{"_index":729,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":598,"title":{},"body":{"injectables/LoggingService.html":{}}}],["entry",{"_index":417,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["entry(methodname",{"_index":432,"title":{},"body":{"classes/Logger.html":{}}}],["enumerations",{"_index":702,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":835,"title":{},"body":{"index.html":{}}}],["environment.ts",{"_index":834,"title":{},"body":{"index.html":{}}}],["error",{"_index":60,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["error(\"configuration",{"_index":138,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["error(\"ionicstoragekey",{"_index":277,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["error(\"localstoragekey",{"_index":361,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["error(\"url",{"_index":141,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["error(`invalid",{"_index":411,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["error(methodname",{"_index":434,"title":{},"body":{"classes/Logger.html":{}}}],["errors",{"_index":557,"title":{},"body":{"injectables/LoggingService.html":{}}}],["event",{"_index":56,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["eventemitter",{"_index":54,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["eventual",{"_index":599,"title":{},"body":{"injectables/LoggingService.html":{}}}],["example",{"_index":801,"title":{},"body":{"index.html":{}}}],["exist",{"_index":516,"title":{},"body":{"injectables/LoggingService.html":{}}}],["existing",{"_index":298,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["exit",{"_index":418,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["exit(methodname",{"_index":436,"title":{},"body":{"classes/Logger.html":{}}}],["export",{"_index":124,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["exports",{"_index":646,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["extends",{"_index":125,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["false",{"_index":147,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["fatal",{"_index":194,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["fatal(methodname",{"_index":438,"title":{},"body":{"classes/Logger.html":{}}}],["feedback",{"_index":827,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["finally",{"_index":745,"title":{},"body":{"index.html":{}}}],["first",{"_index":738,"title":{},"body":{"index.html":{}}}],["following",{"_index":489,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["follows",{"_index":807,"title":{},"body":{"index.html":{}}}],["formatargument",{"_index":419,"title":{},"body":{"classes/Logger.html":{}}}],["formatargument(arg",{"_index":440,"title":{},"body":{"classes/Logger.html":{}}}],["formats",{"_index":442,"title":{},"body":{"classes/Logger.html":{}}}],["formatted",{"_index":431,"title":{},"body":{"classes/Logger.html":{}}}],["framework",{"_index":733,"title":{},"body":{"index.html":{}}}],["full",{"_index":314,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["function",{"_index":666,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["functionalities",{"_index":730,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":488,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getallionicstorageappenders",{"_index":497,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getalllocalstorageappenders",{"_index":498,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getbatchsize",{"_index":34,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternalappender",{"_index":35,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternallogger",{"_index":420,"title":{},"body":{"classes/Logger.html":{}}}],["getionicstoragekey",{"_index":222,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["getlayout",{"_index":36,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getlocalstoragekey",{"_index":346,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["getlogger",{"_index":499,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogger(loggername",{"_index":512,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getloglevel",{"_index":421,"title":{},"body":{"classes/Logger.html":{}}}],["getlogmessages",{"_index":223,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["getlogmessagesfromionicstorage",{"_index":500,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogmessagesfromionicstorage(ionicstoragekey",{"_index":524,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogmessagesfromlocalstorage",{"_index":501,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogmessagesfromlocalstorage(localstoragekey",{"_index":527,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getmaxmessages",{"_index":224,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["getrootlogger",{"_index":502,"title":{},"body":{"injectables/LoggingService.html":{}}}],["gets",{"_index":115,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["gettimerinterval",{"_index":37,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getting",{"_index":705,"title":{"index.html":{}},"body":{}}],["given",{"_index":75,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["greater",{"_index":816,"title":{},"body":{"index.html":{}}}],["happen",{"_index":541,"title":{},"body":{"injectables/LoggingService.html":{}}}],["hello",{"_index":763,"title":{},"body":{"index.html":{}}}],["helper",{"_index":375,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["here",{"_index":479,"title":{},"body":{"classes/Logger.html":{}}}],["hierarchy",{"_index":786,"title":{},"body":{"index.html":{}}}],["higher",{"_index":850,"title":{},"body":{"index.html":{}}}],["http",{"_index":15,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["https://my.backend.xy/loggingbackend",{"_index":21,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["identifier",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["immediatedly",{"_index":197,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["import",{"_index":117,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["important",{"_index":794,"title":{},"body":{"index.html":{}}}],["imports",{"_index":644,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["included",{"_index":809,"title":{},"body":{"index.html":{}}}],["includes",{"_index":802,"title":{},"body":{"index.html":{}}}],["index",{"_index":27,"title":{"index.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info(methodname",{"_index":449,"title":{},"body":{"classes/Logger.html":{}}}],["inform",{"_index":672,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["inherit",{"_index":795,"title":{},"body":{"index.html":{}}}],["init",{"_index":580,"title":{},"body":{"injectables/LoggingService.html":{}}}],["initialize",{"_index":247,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["initionicstorageappender",{"_index":225,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["injectable",{"_index":483,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":485,"title":{},"body":{"injectables/LoggingService.html":{}}}],["inspect",{"_index":268,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["instance",{"_index":49,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["instanceof",{"_index":477,"title":{},"body":{"classes/Logger.html":{}}}],["instead",{"_index":849,"title":{},"body":{"index.html":{}}}],["intended",{"_index":810,"title":{},"body":{"index.html":{}}}],["interface",{"_index":187,"title":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["interfaces",{"_index":188,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"overview.html":{}}}],["internal",{"_index":386,"title":{},"body":{"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["internally",{"_index":85,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["interval",{"_index":113,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["ionic",{"_index":208,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["ionic.logging.ajaxappender",{"_index":176,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ionic.logging.ionicstorageappender",{"_index":335,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionic.logging.localstorageappender",{"_index":371,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["ionic.logging.memoryappender",{"_index":604,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["ionic/storage",{"_index":267,"title":{},"body":{"classes/IonicStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["ionicstorage",{"_index":282,"title":{},"body":{"classes/IonicStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["ionicstorageappender",{"_index":204,"title":{"classes/IonicStorageAppender.html":{}},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["ionicstorageappender(configuration.ionicstorageappender",{"_index":608,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ionicstorageappender.clearlog",{"_index":631,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ionicstorageappender.initionicstorageappender",{"_index":609,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ionicstorageappender.ionicstorage",{"_index":278,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionicstorageappender.ionicstorage.get(ionicstoragekey",{"_index":288,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionicstorageappender.ionicstorage.ready",{"_index":296,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionicstorageappender.ionicstorage.remove(ionicstoragekey",{"_index":295,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionicstorageappender.ionicstorage.remove(this.ionicstoragekey",{"_index":339,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionicstorageappender.ionicstorage.set(this.ionicstoragekey",{"_index":332,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionicstorageappender.loadlogmessages(ionicstoragekey",{"_index":623,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ionicstorageappender.loadlogmessages(this.ionicstoragekey",{"_index":300,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionicstorageappender.maxmessagesdefault",{"_index":306,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionicstorageappender.thresholddefault",{"_index":307,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["ionicstorageappenderconfiguration",{"_index":229,"title":{"interfaces/IonicStorageAppenderConfiguration.html":{}},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["ionicstoragekey",{"_index":216,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["java",{"_index":783,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":198,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["json",{"_index":18,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["json.parse(localstorage.getitem(localstoragekey",{"_index":367,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["json.parse(parse",{"_index":290,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["json.stringify",{"_index":478,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(arg",{"_index":480,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(this.logmessages",{"_index":338,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["json.stringify(this.logmessages)).then(value",{"_index":333,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["keeps",{"_index":826,"title":{},"body":{"index.html":{}}}],["key",{"_index":214,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["keyword",{"_index":275,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["kind",{"_index":785,"title":{},"body":{"index.html":{}}}],["last",{"_index":519,"title":{},"body":{"injectables/LoggingService.html":{}}}],["later",{"_index":824,"title":{},"body":{"index.html":{}}}],["latest",{"_index":707,"title":{},"body":{"index.html":{}}}],["layout",{"_index":94,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["length",{"_index":97,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["level",{"_index":320,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["level.converter",{"_index":123,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["level.converter.ts",{"_index":374,"title":{},"body":{"classes/LogLevelConverter.html":{},"coverage.html":{}}}],["level.converter.ts:15",{"_index":384,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:43",{"_index":389,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:71",{"_index":392,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.loggername",{"_index":585,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.loglevel",{"_index":588,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.model",{"_index":265,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["level.model.ts",{"_index":704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["level.warn",{"_index":828,"title":{},"body":{"index.html":{}}}],["levelfromlog4javascript",{"_index":379,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromlog4javascript(level",{"_index":382,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring",{"_index":380,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring(level",{"_index":388,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levels",{"_index":377,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["leveltolog4javascript",{"_index":381,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["leveltolog4javascript(level",{"_index":391,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["limited",{"_index":523,"title":{},"body":{"injectables/LoggingService.html":{}}}],["line:completed",{"_index":284,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["line:no",{"_index":273,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["lite",{"_index":211,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["load",{"_index":250,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["loadlogmessages",{"_index":226,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["loadlogmessages(ionicstoragekey",{"_index":248,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["loadlogmessages(localstoragekey",{"_index":355,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loads",{"_index":526,"title":{},"body":{"injectables/LoggingService.html":{}}}],["local",{"_index":209,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["localstorage",{"_index":369,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["localstorage.getitem(localstoragekey",{"_index":366,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(localstoragekey",{"_index":368,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(this.localstoragekey",{"_index":372,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.setitem(this.localstoragekey",{"_index":370,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender",{"_index":342,"title":{"classes/LocalStorageAppender.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["localstorageappender(configuration.localstorageappender",{"_index":595,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.clearlog",{"_index":628,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(localstoragekey",{"_index":622,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(this.localstoragekey",{"_index":363,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.maxmessagesdefault",{"_index":364,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.removelogmessages(localstoragekey",{"_index":625,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.thresholddefault",{"_index":365,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappenderconfiguration",{"_index":347,"title":{"interfaces/LocalStorageAppenderConfiguration.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["localstoragekey",{"_index":345,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["log",{"_index":11,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["log4javascript",{"_index":119,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"dependencies.html":{}}}],["log4javascript's",{"_index":387,"title":{},"body":{"classes/LogLevelConverter.html":{},"index.html":{}}}],["log4javascript.ajaxappender",{"_index":91,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.ajaxappender(configuration.url",{"_index":143,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.appender",{"_index":126,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.browserconsoleappender",{"_index":551,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(level.loggername",{"_index":586,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(level.loggername).addappender(ionicstorageappender",{"_index":610,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(logger",{"_index":459,"title":{},"body":{"classes/Logger.html":{}}}],["log4javascript.getrootlogger",{"_index":458,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(ajaxappender",{"_index":593,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(ionicstorageappender",{"_index":612,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(localstorageappender",{"_index":597,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(memoryappender",{"_index":606,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().removeappender(memoryappender",{"_index":605,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.jsonlayout(false",{"_index":146,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.layout",{"_index":95,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.level",{"_index":383,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.all",{"_index":395,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.debug",{"_index":397,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.error",{"_index":399,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.fatal",{"_index":401,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.info",{"_index":403,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.off",{"_index":405,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.trace",{"_index":407,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.warn",{"_index":409,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.logger",{"_index":447,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.loggingevent",{"_index":62,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.loglog.setquietmode(true",{"_index":558,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.patternlayout(\"%d{hh:mm:ss,sss",{"_index":568,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logged",{"_index":429,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["logger",{"_index":322,"title":{"classes/Logger.html":{}},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["logger's",{"_index":799,"title":{},"body":{"index.html":{}}}],["logger().getinternallogger().geteffectiveappenders",{"_index":601,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger(loggername",{"_index":619,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.browserconsoleappender",{"_index":572,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.memoryappender",{"_index":579,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.model",{"_index":547,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(log4javascript.level.warn",{"_index":563,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(loglevelconverter.leveltolog4javascript(loglevelconverter.levelfromstring(level.loglevel",{"_index":587,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loggername",{"_index":517,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["loggers",{"_index":530,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logging",{"_index":73,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loggingconfiguration",{"_index":831,"title":{},"body":{"index.html":{}}}],["loggingevent",{"_index":66,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger",{"_index":323,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger.name",{"_index":324,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages.slice(1",{"_index":325,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages[0",{"_index":327,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.timestamp",{"_index":329,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingservice",{"_index":484,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["loggingservice.configure(environment.logging",{"_index":838,"title":{},"body":{"index.html":{}}}],["loggingservice.getlogger(\"myapp.mycomponent",{"_index":749,"title":{},"body":{"index.html":{}}}],["loggingserviceconfiguration",{"_index":506,"title":{"interfaces/LoggingServiceConfiguration.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["loggingservicemodule",{"_index":640,"title":{"modules/LoggingServiceModule.html":{}},"body":{"modules/LoggingServiceModule.html":{},"index.html":{},"modules.html":{}}}],["loglevel",{"_index":264,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loglevel.all",{"_index":396,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.debug",{"_index":398,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.error",{"_index":400,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.fatal",{"_index":402,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.info",{"_index":404,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.off",{"_index":406,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.trace",{"_index":408,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.warn",{"_index":410,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel[loglevelconverter.levelfromlog4javascript(loggingevent.level",{"_index":321,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter",{"_index":122,"title":{"classes/LogLevelConverter.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["loglevelconverter.levelfromlog4javascript(this.logger.getlevel",{"_index":460,"title":{},"body":{"classes/Logger.html":{}}}],["loglevelconverter.levelfromstring(configuration.browserconsoleappender.threshold",{"_index":617,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loglevelconverter.levelfromstring(configuration.threshold",{"_index":172,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter.leveltolog4javascript",{"_index":171,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["loglevels",{"_index":636,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logmessage",{"_index":243,"title":{"interfaces/LogMessage.html":{}},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["logmessage.timestamp",{"_index":293,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["logmessages",{"_index":286,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["logmessageschanged",{"_index":496,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logs",{"_index":199,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/Logger.html":{},"index.html":{}}}],["look",{"_index":735,"title":{},"body":{"index.html":{}}}],["lower",{"_index":815,"title":{},"body":{"index.html":{}}}],["m",{"_index":570,"title":{},"body":{"injectables/LoggingService.html":{}}}],["mainly",{"_index":87,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["make",{"_index":818,"title":{},"body":{"index.html":{}}}],["massages",{"_index":544,"title":{},"body":{"injectables/LoggingService.html":{}}}],["matching",{"_index":185,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["maximum",{"_index":245,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessages",{"_index":218,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessagesdefault",{"_index":280,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["meaning",{"_index":817,"title":{},"body":{"index.html":{}}}],["means",{"_index":521,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["memory",{"_index":543,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["memoryappender",{"_index":492,"title":{"classes/MemoryAppender.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["memoryappender.maxmessagesdefault",{"_index":669,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender.thresholddefault",{"_index":670,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender](../memoryappender.html",{"_index":620,"title":{},"body":{"injectables/LoggingService.html":{}}}],["memoryappenderconfiguration",{"_index":638,"title":{"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["message",{"_index":59,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["message.model",{"_index":266,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["message.model.ts",{"_index":412,"title":{},"body":{"interfaces/LogMessage.html":{},"coverage.html":{}}}],["messages",{"_index":12,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["method",{"_index":65,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methodname",{"_index":326,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methods",{"_index":31,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["milliseconds",{"_index":99,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["miscellaneous",{"_index":701,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["modified",{"_index":77,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["module",{"_index":639,"title":{"modules/LoggingServiceModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":641,"title":{"modules.html":{}},"body":{"modules/LoggingServiceModule.html":{},"modules.html":{}}}],["more",{"_index":258,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["much",{"_index":336,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["multi",{"_index":841,"title":{},"body":{"index.html":{}}}],["myapp.mycomponent",{"_index":759,"title":{},"body":{"index.html":{}}}],["myapp.mynamespace.mylogger",{"_index":848,"title":{},"body":{"index.html":{}}}],["mycomponent",{"_index":748,"title":{},"body":{"index.html":{}}}],["mylogs",{"_index":217,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["mymethod",{"_index":754,"title":{},"body":{"index.html":{}}}],["mymethod(index",{"_index":753,"title":{},"body":{"index.html":{}}}],["name",{"_index":51,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["named",{"_index":787,"title":{},"body":{"index.html":{}}}],["namespaces",{"_index":780,"title":{},"body":{"index.html":{}}}],["need",{"_index":739,"title":{},"body":{"index.html":{}}}],["needed",{"_index":710,"title":{},"body":{"index.html":{}}}],["new",{"_index":48,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["next",{"_index":272,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["ngmodule",{"_index":643,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["null",{"_index":274,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["number",{"_index":80,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["object",{"_index":671,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["objects",{"_index":430,"title":{},"body":{"classes/Logger.html":{}}}],["older",{"_index":712,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":261,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["one",{"_index":233,"title":{},"body":{"classes/IonicStorageAppender.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["onlogmessageschangedcallback",{"_index":668,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["optional",{"_index":53,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["ordered",{"_index":806,"title":{},"body":{"index.html":{}}}],["output",{"_index":757,"title":{},"body":{"index.html":{}}}],["overview",{"_index":856,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":76,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["package",{"_index":695,"title":{"dependencies.html":{}},"body":{}}],["packages",{"_index":782,"title":{},"body":{"index.html":{}}}],["page",{"_index":574,"title":{},"body":{"injectables/LoggingService.html":{}}}],["par",{"_index":800,"title":{},"body":{"index.html":{}}}],["param",{"_index":135,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["params",{"_index":427,"title":{},"body":{"classes/Logger.html":{}}}],["parent",{"_index":793,"title":{},"body":{"index.html":{}}}],["parse",{"_index":289,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["partial",{"_index":634,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["parts",{"_index":776,"title":{},"body":{"index.html":{}}}],["peer",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":770,"title":{},"body":{"index.html":{}}}],["place",{"_index":772,"title":{},"body":{"index.html":{}}}],["placed",{"_index":774,"title":{},"body":{"index.html":{}}}],["possible",{"_index":493,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["potentially",{"_index":539,"title":{},"body":{"injectables/LoggingService.html":{}}}],["prevent",{"_index":554,"title":{},"body":{"injectables/LoggingService.html":{}}}],["private",{"_index":127,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["process",{"_index":156,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["produce",{"_index":756,"title":{},"body":{"index.html":{}}}],["promise",{"_index":235,"title":{},"body":{"classes/IonicStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["promise.reject(error",{"_index":309,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["properties",{"_index":28,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["provide",{"_index":843,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":550,"title":{},"body":{"injectables/LoggingService.html":{}}}],["providers",{"_index":839,"title":{},"body":{"index.html":{}}}],["public",{"_index":29,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["purposes",{"_index":90,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["queued",{"_index":102,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["quite",{"_index":779,"title":{},"body":{"index.html":{}}}],["rc",{"_index":716,"title":{},"body":{"index.html":{}}}],["read",{"_index":297,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["realtime",{"_index":665,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["recommended",{"_index":832,"title":{},"body":{"index.html":{}}}],["registers",{"_index":660,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["remaining",{"_index":157,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["remove",{"_index":254,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removed",{"_index":262,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removelogmessages",{"_index":227,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removelogmessages(ionicstoragekey",{"_index":252,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["removelogmessages(localstoragekey",{"_index":357,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["removelogmessagesfromionicstorage",{"_index":503,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removelogmessagesfromionicstorage(ionicstoragekey",{"_index":533,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removelogmessagesfromlocalstorage",{"_index":504,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removelogmessagesfromlocalstorage(localstoragekey",{"_index":535,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removes",{"_index":237,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["representation",{"_index":390,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["request",{"_index":83,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["respectively",{"_index":813,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":769,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":851,"title":{},"body":{"index.html":{}}}],["result",{"_index":184,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":186,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["retrieved",{"_index":520,"title":{},"body":{"injectables/LoggingService.html":{}}}],["return",{"_index":175,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["returns",{"_index":68,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["root",{"_index":491,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["same",{"_index":709,"title":{},"body":{"index.html":{}}}],["sample",{"_index":734,"title":{},"body":{"index.html":{}}}],["saved",{"_index":212,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["see",{"_index":743,"title":{},"body":{"index.html":{}}}],["send",{"_index":58,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["sending",{"_index":101,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["sends",{"_index":10,"title":{},"body":{"classes/AjaxAppender.html":{},"index.html":{}}}],["sent",{"_index":81,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["separated",{"_index":777,"title":{},"body":{"index.html":{}}}],["serialized",{"_index":213,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["serve",{"_index":822,"title":{},"body":{"index.html":{}}}],["server",{"_index":13,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["service",{"_index":487,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["service.configuration",{"_index":548,"title":{},"body":{"injectables/LoggingService.html":{}}}],["service.configuration.ts",{"_index":633,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["service.module.ts",{"_index":642,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["set",{"_index":196,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["setbatchsize",{"_index":38,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setbatchsize(batchsize",{"_index":103,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout",{"_index":39,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout(layout",{"_index":108,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setloglevel",{"_index":422,"title":{},"body":{"classes/Logger.html":{}}}],["setloglevel(level",{"_index":451,"title":{},"body":{"classes/Logger.html":{}}}],["setmaxmessages",{"_index":228,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setmaxmessages(value",{"_index":255,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback",{"_index":652,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback(callback",{"_index":658,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["sets",{"_index":105,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval",{"_index":40,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval(timerinterval",{"_index":110,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setting",{"_index":798,"title":{},"body":{"index.html":{}}}],["settings",{"_index":490,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["severe",{"_index":808,"title":{},"body":{"index.html":{}}}],["severity",{"_index":803,"title":{},"body":{"index.html":{}}}],["show",{"_index":555,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["single",{"_index":775,"title":{},"body":{"index.html":{}}}],["size",{"_index":107,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["spcific",{"_index":545,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specific",{"_index":64,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["specified",{"_index":514,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specify",{"_index":649,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["sql",{"_index":210,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["src/.../log",{"_index":703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/lib/ajax",{"_index":6,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/browser",{"_index":201,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/ionic",{"_index":205,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/local",{"_index":343,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/log",{"_index":373,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/logger.model.ts",{"_index":415,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/lib/logger.model.ts:11",{"_index":424,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:112",{"_index":435,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:128",{"_index":439,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:145",{"_index":433,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:164",{"_index":437,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:179",{"_index":441,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:199",{"_index":445,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:29",{"_index":448,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:38",{"_index":452,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:48",{"_index":454,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:64",{"_index":428,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:80",{"_index":450,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:96",{"_index":456,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logging",{"_index":632,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts",{"_index":486,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts:175",{"_index":529,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:184",{"_index":513,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:196",{"_index":518,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:205",{"_index":528,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:214",{"_index":525,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:221",{"_index":532,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:230",{"_index":536,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:246",{"_index":534,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:259",{"_index":511,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:266",{"_index":508,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:36",{"_index":538,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:42",{"_index":537,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:48",{"_index":505,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:91",{"_index":507,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/memory",{"_index":647,"title":{},"body":{"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["started",{"_index":706,"title":{"index.html":{}},"body":{}}],["statements",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":128,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/MemoryAppender.html":{}}}],["step",{"_index":741,"title":{},"body":{"index.html":{}}}],["storage",{"_index":206,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["store",{"_index":240,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["stored",{"_index":242,"title":{},"body":{"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["stores",{"_index":207,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["storing",{"_index":215,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["string",{"_index":116,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["strings",{"_index":292,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["super",{"_index":136,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["switch",{"_index":393,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["table",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":830,"title":{},"body":{"index.html":{}}}],["testing",{"_index":89,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["tests",{"_index":446,"title":{},"body":{"classes/Logger.html":{}}}],["therefore",{"_index":337,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["this.ajaxappender",{"_index":142,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.addheader(\"content",{"_index":148,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.append(loggingevent",{"_index":174,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getbatchsize",{"_index":177,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getlayout",{"_index":179,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.gettimerinterval",{"_index":181,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setbatchsize(batchsize",{"_index":178,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setfailcallback((message",{"_index":154,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(layout",{"_index":180,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(new",{"_index":145,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setsendallonunload(true",{"_index":152,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimed(timerinterval",{"_index":182,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimerinterval(timerinterval",{"_index":183,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappenderfailed",{"_index":562,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.ajaxappenderfailed.emit(message",{"_index":592,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.allionicstorageappenders",{"_index":582,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.allionicstorageappenders.find(appender",{"_index":629,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.allionicstorageappenders.push(ionicstorageappender",{"_index":611,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.alllocalstorageappenders",{"_index":581,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.alllocalstorageappenders.find(appender",{"_index":626,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.alllocalstorageappenders.push(localstorageappender",{"_index":596,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.appenderfailed",{"_index":153,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.appenderfailed.emit(message",{"_index":155,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.browserconsoleappender",{"_index":566,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setlayout(new",{"_index":567,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(convertedthreshold",{"_index":618,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(log4javascript.level.all",{"_index":571,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.configuration",{"_index":270,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["this.configuration.ionicstoragekey",{"_index":304,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["this.configuration.maxmessages",{"_index":305,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["this.configuration.threshold",{"_index":302,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["this.configure",{"_index":158,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["this.ionicstoragekey",{"_index":279,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["this.localstoragekey",{"_index":362,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.logger",{"_index":457,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["this.logger.debug.apply(this.logger",{"_index":467,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.entry(methodname",{"_index":751,"title":{},"body":{"index.html":{}}}],["this.logger.error(methodname",{"_index":755,"title":{},"body":{"index.html":{}}}],["this.logger.error.apply(this.logger",{"_index":473,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.exit(methodname",{"_index":752,"title":{},"body":{"index.html":{}}}],["this.logger.fatal.apply(this.logger",{"_index":475,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.info.apply(this.logger",{"_index":469,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isdebugenabled",{"_index":466,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iserrorenabled",{"_index":472,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isfatalenabled",{"_index":474,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isinfoenabled",{"_index":468,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.istraceenabled",{"_index":462,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iswarnenabled",{"_index":470,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.setlevel(loglevelconverter.leveltolog4javascript(level",{"_index":461,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.trace.apply(this.logger",{"_index":465,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.warn.apply(this.logger",{"_index":471,"title":{},"body":{"classes/Logger.html":{}}}],["this.logmessages",{"_index":299,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.length",{"_index":316,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.push(message",{"_index":330,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.shift",{"_index":318,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.splice(0",{"_index":675,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.logmessageschanged",{"_index":561,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.logmessageschanged.emit",{"_index":578,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.maxmessages",{"_index":317,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.memoryappender",{"_index":575,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.configure(configuration.memoryappender",{"_index":614,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.getlogmessages",{"_index":621,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.removelogmessages",{"_index":624,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setlayout(new",{"_index":576,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setonlogmessageschangedcallback((message",{"_index":577,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.onlogmessageschangedcallback",{"_index":673,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.onlogmessageschangedcallback(message",{"_index":674,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.setbatchsize(configuration.batchsize",{"_index":166,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.setmaxmessages(configuration.maxmessages",{"_index":311,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.setthreshold(convertedthreshold",{"_index":173,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.settimerinterval(configuration.timerinterval",{"_index":168,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.url",{"_index":144,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["threshold",{"_index":26,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["thresholddefault",{"_index":133,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["throw",{"_index":137,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["time",{"_index":98,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timer",{"_index":112,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timerinterval",{"_index":24,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["timerintervaldefault",{"_index":131,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timestamp",{"_index":328,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timestamps",{"_index":291,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["tostring",{"_index":41,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["trace",{"_index":195,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["trace(methodname",{"_index":453,"title":{},"body":{"classes/Logger.html":{}}}],["triggered",{"_index":57,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["true",{"_index":842,"title":{},"body":{"index.html":{}}}],["try",{"_index":303,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["tslint:disable",{"_index":271,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["type",{"_index":52,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["typeof",{"_index":167,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["typical",{"_index":16,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["typically",{"_index":742,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":283,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["under",{"_index":251,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["unit",{"_index":88,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["url",{"_index":20,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["usage",{"_index":737,"title":{},"body":{"index.html":{}}}],["use",{"_index":714,"title":{},"body":{"index.html":{}}}],["used",{"_index":86,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["usefactory",{"_index":845,"title":{},"body":{"index.html":{}}}],["useful",{"_index":663,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["using",{"_index":651,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["util",{"_index":269,"title":{},"body":{"classes/IonicStorageAppender.html":{}}}],["valid",{"_index":191,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["value",{"_index":259,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["values",{"_index":192,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["version",{"_index":708,"title":{},"body":{"index.html":{}}}],["versions",{"_index":713,"title":{},"body":{"index.html":{}}}],["via",{"_index":14,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["viewer",{"_index":736,"title":{},"body":{"index.html":{}}}],["visible",{"_index":819,"title":{},"body":{"index.html":{}}}],["void",{"_index":69,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["want",{"_index":664,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["warn",{"_index":134,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/IonicStorageAppender.html":{},"interfaces/IonicStorageAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["warn(methodname",{"_index":455,"title":{},"body":{"classes/Logger.html":{}}}],["way",{"_index":833,"title":{},"body":{"index.html":{}}}],["write",{"_index":331,"title":{},"body":{"classes/IonicStorageAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["writes",{"_index":853,"title":{},"body":{"index.html":{}}}],["writing",{"_index":416,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["written",{"_index":413,"title":{},"body":{"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["yes",{"_index":425,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AjaxAppender.html":{"url":"classes/AjaxAppender.html","title":"class - AjaxAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AjaxAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which sends the log messages to a server via HTTP.\nA typical configuration could be:\n```json\n\n{\n\"url\": \"https://my.backend.xy/LoggingBackend\",\n\"batchSize\": 10,\n\"timerInterval\": 60000,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appenderFailed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getBatchSize\n                            \n                            \n                                    Public\n                                getInternalAppender\n                            \n                            \n                                    Public\n                                getLayout\n                            \n                            \n                                    Public\n                                getTimerInterval\n                            \n                            \n                                    Public\n                                setBatchSize\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setTimerInterval\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: AjaxAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ajax-appender.model.ts:35\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        AjaxAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            appenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:32\n                            \n                        \n\n                \n                    \n                        Event triggered when the appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:103\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: AjaxAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:80\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe url cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                AjaxAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBatchSize()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:127\n                \n            \n\n\n            \n                \n                    Returns the number of log messages sent in each request.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalAppender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalAppender()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:120\n                \n            \n\n\n            \n                \n                    Get the internally used appender.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         log4javascript.AjaxAppender\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayout()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:142\n                \n            \n\n\n            \n                \n                    Returns the appender's layout.\n\n\n                    \n                        Returns :     log4javascript.Layout\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimerInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:156\n                \n            \n\n\n            \n                \n                    Returns the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setBatchSize(batchSize: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:135\n                \n            \n\n\n            \n                \n                    Sets the number of log messages to send in each request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    batchSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new batch size\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLayout(layout: log4javascript.Layout)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:149\n                \n            \n\n\n            \n                \n                    Sets the appender's layout.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layout\n                                    \n                                            log4javascript.Layout\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTimerInterval(timerInterval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:164\n                \n            \n\n\n            \n                \n                    Sets the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    timerInterval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new timer interval\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:112\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventEmitter } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\n\n/**\n * An appender which sends the log messages to a server via HTTP.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"url\": \"https://my.backend.xy/LoggingBackend\",\n *   \"batchSize\": 10,\n *   \"timerInterval\": 60000,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class AjaxAppender extends log4javascript.Appender {\n\n\tprivate static batchSizeDefault = 1;\n\tprivate static timerIntervalDefault = 0;\n\tprivate static thresholdDefault = \"WARN\";\n\n\t/**\n\t * Event triggered when the appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic appenderFailed: EventEmitter;\n\n\tprivate ajaxAppender: log4javascript.AjaxAppender;\n\tprivate url: string;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: AjaxAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\tif (!configuration.url) {\n\t\t\tthrow new Error(\"url must be not empty\");\n\t\t}\n\t\tthis.ajaxAppender = new log4javascript.AjaxAppender(configuration.url);\n\t\tthis.url = configuration.url;\n\n\t\tthis.ajaxAppender.setLayout(new log4javascript.JsonLayout(false, false));\n\t\tthis.ajaxAppender.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t\tthis.ajaxAppender.setSendAllOnUnload(true);\n\n\t\tthis.appenderFailed = new EventEmitter();\n\t\tthis.ajaxAppender.setFailCallback((message: any) => {\n\t\t\tthis.appenderFailed.emit(message);\n\t\t});\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tbatchSize: configuration.batchSize || AjaxAppender.batchSizeDefault,\n\t\t\tthreshold: configuration.threshold || AjaxAppender.thresholdDefault,\n\t\t\ttimerInterval: configuration.timerInterval || AjaxAppender.timerIntervalDefault,\n\t\t\turl: configuration.url,\n\t\t});\n\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The url cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: AjaxAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.url && configuration.url !== this.url) {\n\t\t\t\tthrow new Error(\"url must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.batchSize) {\n\t\t\t\tthis.setBatchSize(configuration.batchSize);\n\t\t\t}\n\t\t\tif (typeof configuration.timerInterval === \"number\") {\n\t\t\t\tthis.setTimerInterval(configuration.timerInterval);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\tthis.ajaxAppender.append(loggingEvent);\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.AjaxAppender\";\n\t}\n\n\t/**\n\t * Get the internally used appender.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic getInternalAppender(): log4javascript.AjaxAppender {\n\t\treturn this.ajaxAppender;\n\t}\n\n\t/**\n\t * Returns the number of log messages sent in each request.\n\t */\n\tpublic getBatchSize(): number {\n\t\treturn this.ajaxAppender.getBatchSize();\n\t}\n\n\t/**\n\t * Sets the number of log messages to send in each request.\n\t * @param batchSize new batch size\n\t */\n\tpublic setBatchSize(batchSize: number): void {\n\t\tthis.ajaxAppender.setBatchSize(batchSize);\n\t}\n\n\t/**\n\t * Returns the appender's layout.\n\t */\n\tpublic getLayout(): log4javascript.Layout {\n\t\treturn this.ajaxAppender.getLayout();\n\t}\n\n\t/**\n\t * Sets the appender's layout.\n\t */\n\tpublic setLayout(layout: log4javascript.Layout): void {\n\t\tthis.ajaxAppender.setLayout(layout);\n\t}\n\n\t/**\n\t * Returns the length of time in milliseconds between each sending of queued log messages.\n\t */\n\tpublic getTimerInterval(): number {\n\t\treturn this.ajaxAppender.getTimerInterval();\n\t}\n\n\t/**\n\t * Sets the length of time in milliseconds between each sending of queued log messages.\n\t * @param timerInterval new timer interval\n\t */\n\tpublic setTimerInterval(timerInterval: number): void {\n\t\tthis.ajaxAppender.setTimed(timerInterval > 0);\n\t\tthis.ajaxAppender.setTimerInterval(timerInterval);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AjaxAppenderConfiguration.html":{"url":"interfaces/AjaxAppenderConfiguration.html","title":"interface - AjaxAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AjaxAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for AjaxAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        batchSize\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                                \n                                            Optional\n                                        timerInterval\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        batchSize\n                                    \n                                \n                                \n                                    \n                                        batchSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Number of log messages sent in each request.\nDefault: 1.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerInterval\n                                    \n                                \n                                \n                                    \n                                        timerInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Interval for sending log messages (in milliseconds).\nIf set to 0, every message will be sent immediatedly.\nDefault: 0.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Url to send JavaScript logs\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AjaxAppenderConfiguration {\n\n\t/**\n\t * Url to send JavaScript logs\n\t */\n\turl: string;\n\n\t/**\n\t * Number of log messages sent in each request.\n\t *\n\t * Default: 1.\n\t */\n\tbatchSize?: number;\n\n\t/**\n\t * Interval for sending log messages (in milliseconds).\n\t *\n\t * If set to 0, every message will be sent immediatedly.\n\t *\n\t * Default: 0.\n\t */\n\ttimerInterval?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BrowserConsoleAppenderConfiguration.html":{"url":"interfaces/BrowserConsoleAppenderConfiguration.html","title":"interface - BrowserConsoleAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BrowserConsoleAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/browser-console-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for BrowserConsoleAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: DEBUG.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BrowserConsoleAppenderConfiguration {\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: DEBUG.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IonicStorageAppender.html":{"url":"classes/IonicStorageAppender.html","title":"class - IonicStorageAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IonicStorageAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ionic-storage-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the ionic local storage (SQL lite).\nThe messages are saved JSON-serialized.\nYou have to configure which key is used for storing the messages.\nA typical configuration could be:\n```json\n\n{\n\"ionicStorageKey\": \"myLogs\",\n\"maxMessages\": 500,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                append\n                            \n                            \n                                    Public\n                                    Async\n                                clearLog\n                            \n                            \n                                    Public\n                                    Async\n                                configure\n                            \n                            \n                                    Public\n                                getIonicStorageKey\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                    Async\n                                initIonicStorageAppender\n                            \n                            \n                                    Static\n                                    Async\n                                loadLogMessages\n                            \n                            \n                                    Static\n                                    Async\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: IonicStorageAppenderConfiguration, storage: Storage)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ionic-storage-appender.model.ts:25\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        IonicStorageAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                    Storage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the Ionic storage database. We assume that there is one instance of storage.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:148\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            clearLog\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearLog()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:226\n                \n            \n\n\n            \n                \n                    Removes all messages from ionic storage.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: IonicStorageAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:123\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe ionicStorageKey cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                IonicStorageAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getIonicStorageKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getIonicStorageKey()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:180\n                \n            \n\n\n            \n                \n                    Get the key which is used to store the messages in the ionic local storage.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:218\n                \n            \n\n\n            \n                \n                    Gets all messages stored in ionic storage.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:187\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in ionic local storage.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            initIonicStorageAppender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initIonicStorageAppender()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:96\n                \n            \n\n\n            \n                \n                    Initialize the appender.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            loadLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadLogMessages(ionicStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:68\n                \n            \n\n\n            \n                \n                    Load log messages from ionic local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ionicStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages(ionicStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:89\n                \n            \n\n\n            \n                \n                    Remove log messages from ionic local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ionicStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:197\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in local storage.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ionic-storage-appender.model.ts:173\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { IonicStorageAppenderConfiguration } from \"./ionic-storage-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\nimport { Storage } from \"@ionic/storage\";\nimport { inspect } from \"util\";\n/**\n * An appender which stores the log messages in the ionic local storage (SQL lite).\n *\n * The messages are saved JSON-serialized.\n * You have to configure which key is used for storing the messages.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"ionicStorageKey\": \"myLogs\",\n *   \"maxMessages\": 500,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class IonicStorageAppender extends log4javascript.Appender {\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t * @param storage the Ionic storage database. We assume that there is one instance of storage.\n\t */\n\tconstructor(configuration: IonicStorageAppenderConfiguration, storage: Storage) {\n\t\tsuper();\n\n\t\tthis.configuration = configuration;\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tif (!configuration.ionicStorageKey || configuration.ionicStorageKey === \"\") {\n\t\t\tthrow new Error(\"ionicStorageKey must be not empty\");\n\t\t}\n\n\t\t// We assume there is only one instance of storage.\n\t\tIonicStorageAppender.ionicStorage = storage;\n\t\tthis.ionicStorageKey = configuration.ionicStorageKey;\n\t}\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"WARN\";\n\tprivate static ionicStorage: Storage = undefined;\n\n\tprivate maxMessages: number;\n\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate ionicStorageKey: string;\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\n\tprivate configuration: IonicStorageAppenderConfiguration;\n\n\t/**\n\t * Load log messages from ionic local storage which are stored there under the given key.\n\t * @return stored messages\n\t */\n\tpublic static async loadLogMessages(ionicStorageKey: string): Promise {\n\t\tlet logMessages: LogMessage[];\n\n\t\tif (!ionicStorageKey || await IonicStorageAppender.ionicStorage.get(ionicStorageKey) === null) {\n\t\t\tlogMessages = [];\n\t\t} else {\n\t\t\tconst parse = await IonicStorageAppender.ionicStorage.get(ionicStorageKey);\n\t\t\tlogMessages = JSON.parse(parse);\n\t\t\tfor (const logMessage of logMessages) {\n\t\t\t\t// timestamps are serialized as strings\n\t\t\t\tlogMessage.timeStamp = new Date(logMessage.timeStamp);\n\t\t\t}\n\t\t}\n\n\t\treturn logMessages;\n\t}\n\n\t/**\n\t * Remove log messages from ionic local storage which are stored there under the given key.\n\t * @param ionicStorageKey local storage key\n\t */\n\tpublic static async removeLogMessages(ionicStorageKey: string) {\n\t\treturn IonicStorageAppender.ionicStorage.remove(ionicStorageKey);\n\t}\n\n\t/**\n\t * Initialize the appender.\n\t */\n\tpublic async initIonicStorageAppender(): Promise {\n\t\tawait IonicStorageAppender.ionicStorage.ready();\n\t\t// read existing logMessages\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tthis.logMessages = await IonicStorageAppender.loadLogMessages(this.ionicStorageKey);\n\t\t// process remaining configuration\n\t\tconsole.log(\"initIonicStorageAppender : \" + this.configuration.threshold);\n\t\ttry {\n\t\t\tthis.configure({\n\t\t\t\tionicStorageKey: this.configuration.ionicStorageKey,\n\t\t\t\tmaxMessages: this.configuration.maxMessages || IonicStorageAppender.maxMessagesDefault,\n\t\t\t\tthreshold: this.configuration.threshold || IonicStorageAppender.thresholdDefault,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tPromise.reject(error);\n\t\t}\n\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The ionicStorageKey cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic async configure(configuration: IonicStorageAppenderConfiguration): Promise {\n\t\tif (configuration) {\n\t\t\tif (configuration.ionicStorageKey && configuration.ionicStorageKey !== this.ionicStorageKey) {\n\t\t\t\tthrow new Error(\"ionicStorageKey must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\ttry {\n\t\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tPromise.reject(error);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic async append(loggingEvent: log4javascript.LoggingEvent): Promise {\n\t\tconsole.log('append')\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger !== \"undefined\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// write values to ionicStorage\n\t\tIonicStorageAppender.ionicStorage.set(this.ionicStorageKey, JSON.stringify(this.logMessages)).then(value => console.log('append done'));\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.IonicStorageAppender\";\n\t}\n\n\t/**\n\t * Get the key which is used to store the messages in the ionic local storage.\n\t */\n\tpublic getIonicStorageKey(): string {\n\t\treturn this.ionicStorageKey;\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in ionic local storage.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in local storage.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tif (this.maxMessages !== value) {\n\t\t\tthis.maxMessages = value;\n\n\t\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\t\t// there are too much logMessages for the new value, therefore remove oldest messages\n\t\t\t\twhile (this.logMessages.length > this.maxMessages) {\n\t\t\t\t\tthis.logMessages.shift();\n\t\t\t\t}\n\n\t\t\t\t// write values to ionicStorage\n\t\t\t\tIonicStorageAppender.ionicStorage.set(this.ionicStorageKey, JSON.stringify(this.logMessages));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n * Gets all messages stored in ionic storage.\n * Mainly for unit testing purposes.\n * @return stored messages\n */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Removes all messages from ionic storage.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic async clearLog(): Promise {\n\t\tthis.logMessages = [];\n\t\ttry {\n\t\t\tawait IonicStorageAppender.ionicStorage.remove(this.ionicStorageKey);\n\t\t} catch(error) {\n\t\t\tconsole.error('clearLog',inspect(error))\n\t\t}\n\t}\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IonicStorageAppenderConfiguration.html":{"url":"interfaces/IonicStorageAppenderConfiguration.html","title":"interface - IonicStorageAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IonicStorageAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ionic-storage-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for IonicStorageAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ionicStorageKey\n                                \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ionicStorageKey\n                                    \n                                \n                                \n                                    \n                                        ionicStorageKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key which is used to store the messages in the ionic storage.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IonicStorageAppenderConfiguration {\n\t/**\n\t * Key which is used to store the messages in the ionic storage.\n\t */\n\tionicStorageKey: string;\n\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStorageAppender.html":{"url":"classes/LocalStorageAppender.html","title":"class - LocalStorageAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStorageAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's local storage.\nThe messages are saved JSON-serialized.\nYou have to configure which key is used for storing the messages.\nA typical configuration could be:\n```json\n\n{\n\"localStorageKey\": \"myLogs\",\n\"maxMessages\": 500,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                clearLog\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLocalStorageKey\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Static\n                                loadLogMessages\n                            \n                            \n                                    Static\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: LocalStorageAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/local-storage-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        LocalStorageAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clearLog\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearLog()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:198\n                \n            \n\n\n            \n                \n                    Removes all messages from local storage.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: LocalStorageAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:101\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe localStorageKey cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LocalStorageAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalStorageKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalStorageKey()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:152\n                \n            \n\n\n            \n                \n                    Get the key which is used to store the messages in the local storage.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:190\n                \n            \n\n\n            \n                \n                    Gets all messages stored in local storage.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:159\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in local storage.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadLogMessages(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:69\n                \n            \n\n\n            \n                \n                    Load log messages from local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:89\n                \n            \n\n\n            \n                \n                    Remove log messages from local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:169\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in local storage.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:145\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\n\n/**\n * An appender which stores the log messages in the browser's local storage.\n *\n * The messages are saved JSON-serialized.\n * You have to configure which key is used for storing the messages.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"localStorageKey\": \"myLogs\",\n *   \"maxMessages\": 500,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class LocalStorageAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"WARN\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate localStorageKey: string;\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: LocalStorageAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tif (!configuration.localStorageKey || configuration.localStorageKey === \"\") {\n\t\t\tthrow new Error(\"localStorageKey must be not empty\");\n\t\t}\n\t\tthis.localStorageKey = configuration.localStorageKey;\n\n\t\t// read existing logMessages\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tthis.logMessages = LocalStorageAppender.loadLogMessages(this.localStorageKey);\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tlocalStorageKey: configuration.localStorageKey,\n\t\t\tmaxMessages: configuration.maxMessages || LocalStorageAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || LocalStorageAppender.thresholdDefault,\n\t\t});\n\t}\n\n\t/**\n\t * Load log messages from local storage which are stored there under the given key.\n\t * @param localStorageKey local storage key\n\t * @return stored messages\n\t */\n\tpublic static loadLogMessages(localStorageKey: string): LogMessage[] {\n\t\tlet logMessages: LogMessage[];\n\n\t\tif (!localStorageKey || localStorage.getItem(localStorageKey) === null) {\n\t\t\tlogMessages = [];\n\t\t} else {\n\t\t\tlogMessages = JSON.parse(localStorage.getItem(localStorageKey));\n\t\t\tfor (const logMessage of logMessages) {\n\t\t\t\t// timestamps are serialized as strings\n\t\t\t\tlogMessage.timeStamp = new Date(logMessage.timeStamp);\n\t\t\t}\n\t\t}\n\n\t\treturn logMessages;\n\t}\n\n\t/**\n\t * Remove log messages from local storage which are stored there under the given key.\n\t * @param localStorageKey local storage key\n\t */\n\tpublic static removeLogMessages(localStorageKey: string): void {\n\t\tlocalStorage.removeItem(localStorageKey);\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The localStorageKey cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: LocalStorageAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.localStorageKey && configuration.localStorageKey !== this.localStorageKey) {\n\t\t\t\tthrow new Error(\"localStorageKey must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger !== \"undefined\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// write values to localStorage\n\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.LocalStorageAppender\";\n\t}\n\n\t/**\n\t * Get the key which is used to store the messages in the local storage.\n\t */\n\tpublic getLocalStorageKey(): string {\n\t\treturn this.localStorageKey;\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in local storage.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in local storage.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tif (this.maxMessages !== value) {\n\t\t\tthis.maxMessages = value;\n\n\t\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\t\t// there are too much logMessages for the new value, therefore remove oldest messages\n\t\t\t\twhile (this.logMessages.length > this.maxMessages) {\n\t\t\t\t\tthis.logMessages.shift();\n\t\t\t\t}\n\n\t\t\t\t// write values to localStorage\n\t\t\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in local storage.\n\t * Mainly for unit testing purposes.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Removes all messages from local storage.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic clearLog(): void {\n\t\tthis.logMessages = [];\n\t\tlocalStorage.removeItem(this.localStorageKey);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalStorageAppenderConfiguration.html":{"url":"interfaces/LocalStorageAppenderConfiguration.html","title":"interface - LocalStorageAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LocalStorageAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for LocalStorageAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        localStorageKey\n                                \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageKey\n                                    \n                                \n                                \n                                    \n                                        localStorageKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key which is used to store the messages in the local storage.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LocalStorageAppenderConfiguration {\n\t/**\n\t * Key which is used to store the messages in the local storage.\n\t */\n\tlocalStorageKey: string;\n\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogLevelConverter.html":{"url":"classes/LogLevelConverter.html","title":"class - LogLevelConverter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogLevelConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-level.converter.ts\n        \n\n            \n                Description\n            \n            \n                Helper class for converting log levels from and to different data type.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                levelFromLog4Javascript\n                            \n                            \n                                    Static\n                                levelFromString\n                            \n                            \n                                    Static\n                                levelToLog4Javascript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromLog4Javascript(level: log4javascript.Level)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:15\n                \n            \n\n\n            \n                \n                    Converts log4javascript.Level to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            log4javascript.Level\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        log4javascript's data type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromString(level: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:43\n                \n            \n\n\n            \n                \n                    Converts string representation to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string representation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelToLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelToLog4Javascript(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:71\n                \n            \n\n\n            \n                \n                    Converts internal LogLevel to log4javascript.Level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     log4javascript.Level\n\n                    \n                    \n                        level log4javascript's data type\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Helper class for converting log levels from and to different data type.\n */\nexport class LogLevelConverter {\n\n\t/**\n\t * Converts log4javascript.Level to internal LogLevel.\n\t * @param level log4javascript's data type\n\t * @return internal data type.\n\t */\n\tpublic static levelFromLog4Javascript(level: log4javascript.Level): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase log4javascript.Level.ALL:\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase log4javascript.Level.DEBUG:\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase log4javascript.Level.ERROR:\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase log4javascript.Level.FATAL:\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase log4javascript.Level.INFO:\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase log4javascript.Level.OFF:\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase log4javascript.Level.TRACE:\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase log4javascript.Level.WARN:\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts string representation to internal LogLevel.\n\t * @param level string representation\n\t * @return internal data type.\n\t */\n\tpublic static levelFromString(level: string): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase \"ALL\":\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase \"DEBUG\":\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase \"ERROR\":\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase \"FATAL\":\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase \"INFO\":\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase \"OFF\":\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase \"TRACE\":\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase \"WARN\":\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts internal LogLevel to log4javascript.Level.\n\t * @param internal data type.\n\t * @return level log4javascript's data type\n\t */\n\tpublic static levelToLog4Javascript(level: LogLevel): log4javascript.Level {\n\t\tswitch (level) {\n\t\t\tcase LogLevel.ALL:\n\t\t\t\treturn log4javascript.Level.ALL;\n\t\t\tcase LogLevel.DEBUG:\n\t\t\t\treturn log4javascript.Level.DEBUG;\n\t\t\tcase LogLevel.ERROR:\n\t\t\t\treturn log4javascript.Level.ERROR;\n\t\t\tcase LogLevel.FATAL:\n\t\t\t\treturn log4javascript.Level.FATAL;\n\t\t\tcase LogLevel.INFO:\n\t\t\t\treturn log4javascript.Level.INFO;\n\t\t\tcase LogLevel.OFF:\n\t\t\t\treturn log4javascript.Level.OFF;\n\t\t\tcase LogLevel.TRACE:\n\t\t\t\treturn log4javascript.Level.TRACE;\n\t\t\tcase LogLevel.WARN:\n\t\t\t\treturn log4javascript.Level.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogMessage.html":{"url":"interfaces/LogMessage.html","title":"interface - LogMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LogMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-message.model.ts\n        \n\n            \n                Description\n            \n            \n                Log message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        level\n                                \n                                \n                                        logger\n                                \n                                \n                                        message\n                                \n                                \n                                        methodName\n                                \n                                \n                                        timeStamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                    \n                                \n                                \n                                    \n                                        level:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Log level.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logger\n                                    \n                                \n                                \n                                    \n                                        logger:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the logger.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        methodName\n                                    \n                                \n                                \n                                    \n                                        methodName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Method, in which the message was written.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Time when the log was written.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LogMessage {\n\t/**\n\t * Time when the log was written.\n\t */\n\ttimeStamp: Date;\n\n\t/**\n\t * Log level.\n\t */\n\tlevel: string;\n\n\t/**\n\t * Name of the logger.\n\t */\n\tlogger: string;\n\n\t/**\n\t * Method, in which the message was written.\n\t */\n\tmethodName: string;\n\n\t/**\n\t * Message.\n\t */\n\tmessage: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.model.ts\n        \n\n            \n                Description\n            \n            \n                Logger for writing log messages.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                entry\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                exit\n                            \n                            \n                                    Public\n                                fatal\n                            \n                            \n                                    Public\n                                formatArgument\n                            \n                            \n                                    Public\n                                getInternalLogger\n                            \n                            \n                                    Public\n                                getLogLevel\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                trace\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger?: string | any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/logger.model.ts:11\n                            \n                        \n\n                \n                    \n                            Creates a new instance of a logger.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            debug\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:64\n                \n            \n\n\n            \n                \n                    Logs a message at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            entry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    entry(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:145\n                \n            \n\n\n            \n                \n                    Logs the entry into a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            error\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    error(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:112\n                \n            \n\n\n            \n                \n                    Logs a message at level ERROR.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exit(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:164\n                \n            \n\n\n            \n                \n                    Logs the exit of a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fatal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fatal(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:128\n                \n            \n\n\n            \n                \n                    Logs a message at level FATAL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            formatArgument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatArgument(arg: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:179\n                \n            \n\n\n            \n                \n                    Formats the given argument.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arg\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:199\n                \n            \n\n\n            \n                \n                    Returns the internal Logger (for unit tests only).\n\n\n                    \n                        Returns :         log4javascript.Logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogLevel()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:29\n                \n            \n\n\n            \n                \n                    Get the log level.\n\n\n                    \n                        Returns :         LogLevel\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            info\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    info(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:80\n                \n            \n\n\n            \n                \n                    Logs a message at level INFO.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:38\n                \n            \n\n\n            \n                \n                    Set the log level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new log level\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trace\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trace(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:48\n                \n            \n\n\n            \n                \n                    Logs a message at level TRACE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:96\n                \n            \n\n\n            \n                \n                    Logs a message at level WARN.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Logger for writing log messages.\n */\nexport class Logger {\n\n\tprivate logger: log4javascript.Logger;\n\n\t/**\n\t * Creates a new instance of a logger.\n\t */\n\tconstructor(logger?: string | any) {\n\t\tif (typeof logger === \"undefined\") {\n\t\t\tthis.logger = log4javascript.getRootLogger();\n\t\t} else if (typeof logger === \"string\") {\n\t\t\tthis.logger = log4javascript.getLogger(logger);\n\t\t} else {\n\t\t\tthis.logger = logger;\n\t\t}\n\t}\n\n\t/**\n\t * Get the log level.\n\t */\n\tpublic getLogLevel(): LogLevel {\n\t\treturn LogLevelConverter.levelFromLog4Javascript(this.logger.getLevel());\n\t}\n\n\t/**\n\t * Set the log level.\n\t *\n\t * @param level the new log level\n\t */\n\tpublic setLogLevel(level: LogLevel): void {\n\t\tthis.logger.setLevel(LogLevelConverter.levelToLog4Javascript(level));\n\t}\n\n\t/**\n\t * Logs a message at level TRACE.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic trace(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.trace.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic debug(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.debug.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level INFO.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic info(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level WARN.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic warn(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isWarnEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.warn.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level ERROR.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic error(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isErrorEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.error.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level FATAL.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic fatal(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isFatalEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.fatal.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the entry into a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic entry(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"entry\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the exit of a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic exit(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"exit\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Formats the given argument.\n\t */\n\tpublic formatArgument(arg: any): string {\n\t\tif (typeof arg === \"string\") {\n\t\t\treturn arg;\n\t\t} else if (typeof arg === \"number\") {\n\t\t\treturn arg.toString();\n\t\t} else if (arg instanceof Error) {\n\t\t\t// JSON.stringify() returns here \"{ }\"\n\t\t\treturn arg.toString();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(arg);\n\t\t\t} catch (e) {\n\t\t\t\treturn e.message;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the internal Logger (for unit tests only).\n\t */\n\tpublic getInternalLogger(): log4javascript.Logger {\n\t\treturn this.logger;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for logging functionality.\nBy default, the following settings are used:\n\nlogger: root with level WARN\nappender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n\nVia configure, it is possible to amend these settings.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ajaxAppenderFailed\n                            \n                            \n                                    Public\n                                logMessagesChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                configure\n                            \n                            \n                                getAllIonicStorageAppenders\n                            \n                            \n                                getAllLocalStorageAppenders\n                            \n                            \n                                    Public\n                                getLogger\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                    Async\n                                getLogMessagesFromIonicStorage\n                            \n                            \n                                    Public\n                                getLogMessagesFromLocalStorage\n                            \n                            \n                                    Public\n                                getRootLogger\n                            \n                            \n                                    Public\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                    Async\n                                removeLogMessagesFromIonicStorage\n                            \n                            \n                                    Public\n                                removeLogMessagesFromLocalStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/logging.service.ts:48\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the service.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration?: LoggingServiceConfiguration, storage?: Storage)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:91\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LoggingServiceConfiguration\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                                \n                                    storage\n                                    \n                                            Storage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllIonicStorageAppenders\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllIonicStorageAppenders()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:266\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         IonicStorageAppender[]\n\n                    \n                    \n                        all configured IonicStorage appenders\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllLocalStorageAppenders\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllLocalStorageAppenders()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:259\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         LocalStorageAppender[]\n\n                    \n                    \n                        all configured LocalStorage appenders\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogger(loggerName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:184\n                \n            \n\n\n            \n                \n                    Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggerName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the logger\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:196\n                \n            \n\n\n            \n                \n                    Gets the last log messages.\nThe log messages are retrieved from the internal MemoryAppender.\nThat means you will get only the most current messages. The number of the messages is limited\nby its maxMessages value.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getLogMessagesFromIonicStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessagesFromIonicStorage(ionicStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:214\n                \n            \n\n\n            \n                \n                    Loads the log messages written by the ionicStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ionicStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the ionic storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessagesFromLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessagesFromLocalStorage(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:205\n                \n            \n\n\n            \n                \n                    Loads the log messages written by the LocalStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the local storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRootLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:175\n                \n            \n\n\n            \n                \n                    Gets the root logger from which all other loggers derive.\n\n\n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        root logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:221\n                \n            \n\n\n            \n                \n                    Remove all log messages.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            removeLogMessagesFromIonicStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessagesFromIonicStorage(ionicStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:246\n                \n            \n\n\n            \n                \n                    Removes the log messages written by the IonicStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ionicStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLogMessagesFromLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessagesFromLocalStorage(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:230\n                \n            \n\n\n            \n                \n                    Removes the log messages written by the LocalStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the local storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ajaxAppenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:42\n                            \n                        \n\n                \n                    \n                        Event triggered when ajax appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            logMessagesChanged\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:36\n                            \n                        \n\n                \n                    \n                        Event triggered when the log messages got (potentially) change.\nThis can happen when:\n\nnew message was added\nall message where removed from memory\nall massages where removed for one spcific LocalStorageAppender\n\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppender } from \"./ajax-appender.model\";\nimport { IonicStorageAppender } from \"./ionic-storage-appender.model\";\nimport { LocalStorageAppender } from \"./local-storage-appender.model\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogMessage } from \"./log-message.model\";\nimport { Logger } from \"./logger.model\";\nimport { LoggingServiceConfiguration } from \"./logging-service.configuration\";\nimport { MemoryAppender } from \"./memory-appender.model\";\nimport { Storage } from \"@ionic/storage\";\n\n/**\n * Service for logging functionality.\n *\n * By default, the following settings are used:\n *  - logger: root with level WARN\n *  - appender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n *\n * Via [configure](#configure), it is possible to amend these settings.\n */\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class LoggingService {\n\n\t/**\n\t * Event triggered when the log messages got (potentially) change.\n\t * This can happen when:\n\t * - new message was added\n\t * - all message where removed from memory\n\t * - all massages where removed for one spcific LocalStorageAppender\n\t */\n\tpublic logMessagesChanged: EventEmitter;\n\n\t/**\n\t * Event triggered when ajax appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic ajaxAppenderFailed: EventEmitter;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate memoryAppender: MemoryAppender;\n\tprivate browserConsoleAppender: log4javascript.BrowserConsoleAppender;\n\tprivate allLocalStorageAppenders: LocalStorageAppender[];\n\tprivate allIonicStorageAppenders: IonicStorageAppender[];\n\n\t/**\n\t * Creates a new instance of the service.\n\t */\n\tconstructor() {\n\n\t\t// prevent log4javascript to show alerts on case of errors\n\t\tlog4javascript.logLog.setQuietMode(true);\n\n\t\t// create event emitter\n\t\tthis.logMessagesChanged = new EventEmitter();\n\t\tthis.ajaxAppenderFailed = new EventEmitter();\n\n\t\t// configure appender\n\t\tconst logger = log4javascript.getRootLogger();\n\t\tlogger.setLevel(log4javascript.Level.WARN);\n\n\t\t// browser console appender for debugger\n\t\tthis.browserConsoleAppender = new log4javascript.BrowserConsoleAppender();\n\t\tthis.browserConsoleAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.browserConsoleAppender.setThreshold(log4javascript.Level.ALL);\n\t\tlogger.addAppender(this.browserConsoleAppender);\n\n\t\t// in-memory appender for display on log messages page\n\t\tthis.memoryAppender = new MemoryAppender();\n\t\tthis.memoryAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.memoryAppender.setOnLogMessagesChangedCallback((message) => {\n\t\t\tthis.logMessagesChanged.emit();\n\t\t});\n\t\tlogger.addAppender(this.memoryAppender);\n\n\t\t// init stored appenders\n\t\tthis.allLocalStorageAppenders = [];\n\t\tthis.allIonicStorageAppenders = [];\n\n\t\tthis.configure();\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * @param configuration configuration data.\n\t */\n\tpublic async configure(configuration?: LoggingServiceConfiguration, storage?: Storage) {\n\n\t\tif (typeof configuration === \"undefined\") {\n\t\t\tconfiguration = {};\n\t\t}\n\n\t\t// set log levels\n\t\tif (typeof configuration.logLevels !== \"undefined\") {\n\t\t\tfor (const level of configuration.logLevels) {\n\t\t\t\tlet logger: log4javascript.Logger;\n\t\t\t\tconsole.log(\"configure set log levels level.loggerName=\" + level.loggerName);\n\t\t\t\tif (level.loggerName === \"root\") {\n\t\t\t\t\tlogger = log4javascript.getRootLogger();\n\t\t\t\t} else {\n\t\t\t\t\tlogger = log4javascript.getLogger(level.loggerName);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlogger.setLevel(LogLevelConverter.levelToLog4Javascript(LogLevelConverter.levelFromString(level.logLevel)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(`invalid log level ${level.logLevel}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// configure AjaxAppender\n\t\tif (typeof configuration.ajaxAppender !== \"undefined\") {\n\t\t\tconst ajaxAppender = new AjaxAppender(configuration.ajaxAppender);\n\t\t\tajaxAppender.appenderFailed.subscribe((message: string) => {\n\t\t\t\tthis.ajaxAppenderFailed.emit(message);\n\t\t\t});\n\t\t\tlog4javascript.getRootLogger().addAppender(ajaxAppender);\n\t\t}\n\n\t\t// configure LocalStorageAppender\n\t\tif (typeof configuration.localStorageAppender !== \"undefined\") {\n\t\t\tconst localStorageAppender = new LocalStorageAppender(configuration.localStorageAppender);\n\t\t\tthis.allLocalStorageAppenders.push(localStorageAppender);\n\t\t\tlog4javascript.getRootLogger().addAppender(localStorageAppender);\n\n\t\t\t// ensure that an eventual memoryAppender is behind the localStorageAppender\n\t\t\tconst appenders = new Logger().getInternalLogger().getEffectiveAppenders();\n\t\t\tconst memoryAppender = appenders.find((a) => a.toString() === \"Ionic.Logging.MemoryAppender\") as MemoryAppender;\n\t\t\tif (memoryAppender) {\n\t\t\t\tlog4javascript.getRootLogger().removeAppender(memoryAppender);\n\t\t\t\tlog4javascript.getRootLogger().addAppender(memoryAppender);\n\t\t\t}\n\t\t}\n\n\t\t// configure ionicStorageAppender\n\t\tif (typeof configuration.ionicStorageAppender !== \"undefined\" && typeof storage !== \"undefined\") {\n\t\t\tconsole.log(\"configure ionicStorageAppender\");\n\t\t\tconst ionicStorageAppender = new IonicStorageAppender(configuration.ionicStorageAppender, storage);\n\t\t\tawait ionicStorageAppender.initIonicStorageAppender();\n\t\t\tif (typeof configuration.logLevels !== \"undefined\") {\n\t\t\t\tfor (const level of configuration.logLevels) {\n\t\t\t\t\tlog4javascript.getLogger(level.loggerName).addAppender(ionicStorageAppender);\n\t\t\t\t\tthis.allIonicStorageAppenders.push(ionicStorageAppender);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog4javascript.getRootLogger().addAppender(ionicStorageAppender);\n\t\t\t\tthis.allIonicStorageAppenders.push(ionicStorageAppender);\n\t\t\t}\n\t\t}\n\n\t\t// configure MemoryAppender\n\t\tif (configuration.memoryAppender) {\n\t\t\tthis.memoryAppender.configure(configuration.memoryAppender);\n\t\t}\n\n\t\t// configure BrowserConsoleAppender\n\t\tif (configuration.browserConsoleAppender) {\n\t\t\tif (configuration.browserConsoleAppender.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.browserConsoleAppender.threshold));\n\t\t\t\tthis.browserConsoleAppender.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Gets the root logger from which all other loggers derive.\n\t * @return root logger\n\t */\n\tpublic getRootLogger(): Logger {\n\t\treturn new Logger();\n\t}\n\n\t/**\n\t * Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\t * @param loggerName name of the logger\n\t * @return logger\n\t */\n\tpublic getLogger(loggerName: string): Logger {\n\t\treturn new Logger(loggerName);\n\t}\n\n\t/**\n\t * Gets the last log messages.\n\t *\n\t * The log messages are retrieved from the internal [MemoryAppender](../memoryappender.html).\n\t * That means you will get only the most current messages. The number of the messages is limited\n\t * by its maxMessages value.\n\t * @return log messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.memoryAppender.getLogMessages();\n\t}\n\n\t/**\n\t * Loads the log messages written by the LocalStorageAppender with the given key.\n\t * @param localStorageKey key for the local storage\n\t * @returns log messages\n\t */\n\tpublic getLogMessagesFromLocalStorage(localStorageKey: string): LogMessage[] {\n\t\treturn LocalStorageAppender.loadLogMessages(localStorageKey);\n\t}\n\n\t/**\n\t * Loads the log messages written by the ionicStorageAppender with the given key.\n\t * @param ionicStorageKey key for the ionic storage\n\t * @returns log messages\n\t */\n\tpublic async getLogMessagesFromIonicStorage(ionicStorageKey: string): Promise {\n\t\treturn await IonicStorageAppender.loadLogMessages(ionicStorageKey);\n\t}\n\n\t/**\n\t * Remove all log messages.\n\t */\n\tpublic removeLogMessages(): void {\n\t\tthis.memoryAppender.removeLogMessages();\n\t\tthis.logMessagesChanged.emit();\n\t}\n\n\t/**\n\t * Removes the log messages written by the LocalStorageAppender with the given key.\n\t * @param localStorageKey key for the local storage\n\t */\n\tpublic removeLogMessagesFromLocalStorage(localStorageKey: string): void {\n\t\t// LocalStorageAppender.removeLogMessages(localStorageKey);\n\t\t// this.logMessagesChanged.emit();\n\t\tif (this.allLocalStorageAppenders) {\n\t\t\tconst localStorageAppender = this.allLocalStorageAppenders.find(appender => appender.getLocalStorageKey() === localStorageKey);\n\t\t\tif (localStorageAppender) {\n\t\t\t\tlocalStorageAppender.clearLog();\n\t\t\t\tthis.logMessagesChanged.emit();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes the log messages written by the IonicStorageAppender with the given key.\n\t * @param localStorageKey key for the local storage\n\t */\n\tpublic async removeLogMessagesFromIonicStorage(ionicStorageKey: string): Promise {\n\t\tif (this.allIonicStorageAppenders) {\n\t\t\tconst ionicStorageAppender = this.allIonicStorageAppenders.find(appender => appender.getIonicStorageKey() === ionicStorageKey);\n\t\t\tif (ionicStorageAppender) {\n\t\t\t\tawait ionicStorageAppender.clearLog();\n\t\t\t\tthis.logMessagesChanged.emit();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns all configured LocalStorage appenders\n\t */\n\tgetAllLocalStorageAppenders(): LocalStorageAppender[] {\n\t\treturn this.allLocalStorageAppenders;\n\t}\n\n\t/**\n\t * @returns all configured IonicStorage appenders\n\t */\n\tgetAllIonicStorageAppenders(): IonicStorageAppender[] {\n\t\treturn this.allIonicStorageAppenders;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggingServiceConfiguration.html":{"url":"interfaces/LoggingServiceConfiguration.html","title":"interface - LoggingServiceConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggingServiceConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging-service.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Partial configuration definition for LoggingService.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ajaxAppender\n                                \n                                \n                                            Optional\n                                        browserConsoleAppender\n                                \n                                \n                                            Optional\n                                        ionicStorageAppender\n                                \n                                \n                                            Optional\n                                        localStorageAppender\n                                \n                                \n                                            Optional\n                                        logLevels\n                                \n                                \n                                            Optional\n                                        memoryAppender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ajaxAppender\n                                    \n                                \n                                \n                                    \n                                        ajaxAppender:         AjaxAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AjaxAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for AjaxAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        browserConsoleAppender\n                                    \n                                \n                                \n                                    \n                                        browserConsoleAppender:         BrowserConsoleAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BrowserConsoleAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for BrowserConsoleAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ionicStorageAppender\n                                    \n                                \n                                \n                                    \n                                        ionicStorageAppender:         IonicStorageAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IonicStorageAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for ionicStorageAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageAppender\n                                    \n                                \n                                \n                                    \n                                        localStorageAppender:         LocalStorageAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LocalStorageAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for LocalStorageAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevels\n                                    \n                                \n                                \n                                    \n                                        logLevels:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Log levels for different loggers.\nDefault: root: WARN\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        memoryAppender\n                                    \n                                \n                                \n                                    \n                                        memoryAppender:         MemoryAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MemoryAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for MemoryAppender.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { BrowserConsoleAppenderConfiguration } from \"./browser-console-appender.configuration\";\nimport { IonicStorageAppenderConfiguration } from \"./ionic-storage-appender.configuration\";\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * Partial configuration definition for LoggingService.\n */\nexport interface LoggingServiceConfiguration {\n\n\t/**\n\t * Log levels for different loggers.\n\t * Default: root: WARN\n\t */\n\tlogLevels?: Array;\n\n\t/**\n\t * Settings for AjaxAppender.\n\t */\n\tajaxAppender?: AjaxAppenderConfiguration;\n\n\t/**\n\t * Settings for LocalStorageAppender.\n\t */\n\tlocalStorageAppender?: LocalStorageAppenderConfiguration;\n\n\t/**\n\t * Settings for ionicStorageAppender.\n\t */\n\tionicStorageAppender?: IonicStorageAppenderConfiguration;\n\n\t/**\n\t * Settings for MemoryAppender.\n\t */\n\tmemoryAppender?: MemoryAppenderConfiguration;\n\n\t/**\n\t * Settings for BrowserConsoleAppender.\n\t */\n\tbrowserConsoleAppender?: BrowserConsoleAppenderConfiguration;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingServiceModule.html":{"url":"modules/LoggingServiceModule.html","title":"module - LoggingServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingServiceModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/logging-service.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\n\n@NgModule({\n\timports: [\n\t],\n\tdeclarations: [\n\t],\n\texports: [\n\t]\n})\nexport class LoggingServiceModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemoryAppender.html":{"url":"classes/MemoryAppender.html","title":"class - MemoryAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemoryAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's memory.\nThe MemoryAppender is enabled by default.\nIf you do not specify anything else, it is using this configuration:\n```JSON\n\n{\n\"memoryAppender\": [\n{\n\"maxMessages\": 250,\n\"threshold\": \"ALL\"\n}\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                setOnLogMessagesChangedCallback\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration?: MemoryAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/memory-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        MemoryAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:78\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: MemoryAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:61\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                MemoryAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:134\n                \n            \n\n\n            \n                \n                    Gets all messages stored in memory.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:111\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in memory.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:141\n                \n            \n\n\n            \n                \n                    Remove all messages stored in memory.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in memory.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOnLogMessagesChangedCallback\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:150\n                \n            \n\n\n            \n                \n                    Registers a callback which will be called every time a new message is appended.\nThis could be useful if you want to show new messages in realtime.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to be called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:104\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * An appender which stores the log messages in the browser's memory.\n *\n * The MemoryAppender is enabled by default.\n * If you do not specify anything else, it is using this configuration:\n *\n * ```JSON\n * {\n *   \"memoryAppender\": [\n *     {\n *       \"maxMessages\": 250,\n *       \"threshold\": \"ALL\"\n *     }\n * }\n * ```\n */\nexport class MemoryAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"ALL\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\t// tslint:disable-next-line:completed-docs\n\tprivate onLogMessagesChangedCallback: (message: LogMessage) => void;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration?: MemoryAppenderConfiguration) {\n\t\tsuper();\n\n\t\tthis.logMessages = [];\n\n\t\t// process configuration\n\t\tconfiguration = configuration || {};\n\t\tthis.configure({\n\t\t\tmaxMessages: configuration.maxMessages || MemoryAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || MemoryAppender.thresholdDefault,\n\t\t});\n\n\t\tthis.maxMessages = MemoryAppender.maxMessagesDefault;\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * Only the defined properties get overwritten.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: MemoryAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger === \"object\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// inform about new message\n\t\tif (typeof this.onLogMessagesChangedCallback === \"function\") {\n\t\t\tthis.onLogMessagesChangedCallback(message);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.MemoryAppender\";\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in memory.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in memory.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tthis.maxMessages = value;\n\n\t\t// if there are too much logMessages for the new value, remove oldest messages\n\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\tthis.logMessages.splice(0, this.logMessages.length - this.maxMessages);\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in memory.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Remove all messages stored in memory.\n\t */\n\tpublic removeLogMessages(): void {\n\t\tthis.logMessages.splice(0);\n\t}\n\n\t/**\n\t * Registers a callback which will be called every time a new message is appended.\n\t * This could be useful if you want to show new messages in realtime.\n\t * @param callback callback to be called\n\t */\n\tpublic setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void): void {\n\t\tthis.onLogMessagesChangedCallback = callback;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemoryAppenderConfiguration.html":{"url":"interfaces/MemoryAppenderConfiguration.html","title":"interface - MemoryAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MemoryAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for MemoryAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\nDefault: ALL.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MemoryAppenderConfiguration {\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\n\t *\n\t * Default: ALL.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/ajax-appender.configuration.ts\n            \n            interface\n            AjaxAppenderConfiguration\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/ajax-appender.model.ts\n            \n            class\n            AjaxAppender\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/lib/browser-console-appender.configuration.ts\n            \n            interface\n            BrowserConsoleAppenderConfiguration\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/ionic-storage-appender.configuration.ts\n            \n            interface\n            IonicStorageAppenderConfiguration\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/ionic-storage-appender.model.ts\n            \n            class\n            IonicStorageAppender\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.configuration.ts\n            \n            interface\n            LocalStorageAppenderConfiguration\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.model.ts\n            \n            class\n            LocalStorageAppender\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/lib/log-level.converter.ts\n            \n            class\n            LogLevelConverter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/log-message.model.ts\n            \n            interface\n            LogMessage\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logger.model.ts\n            \n            class\n            Logger\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/lib/logging-service.configuration.ts\n            \n            interface\n            LoggingServiceConfiguration\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/lib/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                86 %\n                (13/15)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.configuration.ts\n            \n            interface\n            MemoryAppenderConfiguration\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.model.ts\n            \n            class\n            MemoryAppender\n            \n                100 %\n                (10/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            log4javascript : ^1.4.15\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^7.0.0\n        \n            @angular/core : ^7.0.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogLevel   (src/.../log-level.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/log-level.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Logging levels.\n\n                        \n                    \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                 FATAL\n                            \n                        \n                        \n                            \n                                 OFF\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nionic-logging-service\nThe dependencies used by the latest version are the same as needed for Ionic 4.0.0. For older versions use:\n\n\n\nionic-logging-service\nIonic\nAngular\n\n\n\n\n7.0.0\n>= 4.0.0-rc\n^7.0.0\n\n\n6.0.0\n>= 4.0.0-beta\n^6.0.0\n\n\n5.1.0\n>= 3.9.0\n^5.0.0\n\n\n3.1.0\n>= 3.0.0\n^4.0.0\n\n\n2.0.0\n>= 2.2.0\n^2.4.8\n\n\n1.2.1\n>= 2.0.0\n^2.2.1\n\n\n\nThis service encapsulates log4javascript's functionalities for apps built with Ionic framework.\nFor a sample, just have a look at ionic-logging-viewer.\nUsage\nFirst, you need to import the LoggingServiceModule in your AppModule. The next step is typically the configuration (see below). And then, finally, you can use the LoggingService in your code, e.g.:\nimport { Logger, LoggingService } from \"ionic-logging-service\";\n\nexport class MyComponent {\n\n  private logger: Logger;\n\n  constructor(\n    loggingService: LoggingService) {\n\n    this.logger = loggingService.getLogger(\"MyApp.MyComponent\");\n    const methodName = \"ctor\";\n    this.logger.entry(methodName);\n\n    ...\n\n    this.logger.exit(methodName);\n  }\n\n  public myMethod(index: number, message: string): number[] {\n    const methodName = \"myMethod\";\n    this.logger.entry(methodName, index, number);\n\n    try {\n      ...\n    } catch (e) {\n      this.logger.error(methodName, \"some error\", e);\n    }\n\n    this.logger.exit(methodName);\n    return result;\n  }\n}Depending how the code is called, this could produce the following output in the browser's console:\nI  18:49:43.794  MyApp.MyComponent  ctor  entry\nI  18:49:43.797  MyApp.MyComponent  ctor  exit\nI  18:49:43.801  MyApp.MyComponent  myMethod  entry  42  Hello\nE  18:49:43.814  MyApp.MyComponent  myMethod  some error\nI  18:49:43.801  MyApp.MyComponent  myMethod  exit  [2, 5, 99]Logger\nA logger is the component responsible for logging. Typically, you have one logger per every class. The logger name describe the place where in your app the class is placed. The single parts are separated by dots ('.'). This is quite the same as with namespaces in dotnet or packages in Java.\nThis builds some kind of hierarchy. E.g., if you have a logger named A.B.C.D, you get automatically also loggers for A.B.C, A.B and A. Additionally, there is the so-called root logger, which is the parent of all other loggers.\nThe hierarchy is important, since the loggers inherit the log level from there parent - if there is no other level defined. That means, you can define just one log level for the complete app (by setting the root logger's level), and you can par example define, you do not want to see logs written for logger A.B.C (this includes also A.B.C.D).\nLevel\nEvery log message has a level. This is the severity of the message. Available levels are TRACE, DEBUG, INFO, WARN, ERROR and FATAL - these correspond to the logging methods trace, debug, info, warn, error and fatal of Logger. Levels are ordered as follows: TRACE DEBUG INFO WARN ERROR FATAL. This means the FATAL is the most severe and TRACE the least. Also included are levels called ALL and OFF intended to enable or disable all logging respectively.\nSetting a level to a logger disables log messages of severity lower than that level. For instance, if a level of INFO is set on a logger then only log messages of severity INFO or greater will be logged, meaning DEBUG and TRACE messages will not be logged.\nAppender\nAppenders make the logs visible, e.g. by writing them to the browser's console. This is quite useful during development, either in console or using ionic serve --consolelogs. But later, you will need other logs:\n\nAjaxAppender: sends the log messages to a backend server\nMemoryAppender: keeps the log messages in memory\nLocalStorageAppender: stores the log messages in local storage\n\nIf you want to see a complete example, have a look at ionic-feedback-sample.\nConfiguration\nBy default, the following configuration is used:\n\nLogger:\n\nroot: Level.WARN\n\n\nAppender:\n\nBrowserConsoleAppender\nMemoryAppender\n\n\n\nTo change it, just call configure(). This method takes an object of type LoggingConfiguration.\nThe recommended way is to place the configuration in environment.ts:\nexport const environment = {\n  logging: {\n    ...\n  }\n};Call configure() in your app.module.ts:\nexport function configureLogging(loggingService: LoggingService): () => void {\n  return () => loggingService.configure(environment.logging);\n}\n\n@NgModule({\n  ...\n  imports: [\n    ...\n    LoggingServiceModule\n  ],\n  providers: [\n    {\n      deps: [LoggingService],\n      multi: true,\n      provide: APP_INITIALIZER,\n      useFactory: configureLogging\n    }\n  ]\n})\nexport class AppModule { }logLevels\nlogLevels gets an array of log level definitions for different loggers, e.g.\n{\n  \"logLevels\": [\n    {\n      \"loggerName\": \"root\",\n      \"logLevel\": \"DEBUG\"\n    },\n    {\n      \"loggerName\": \"MyApp.MyNamespace.MyLogger\",\n      \"logLevel\": \"INFO\"\n    }\n  ]\n};That means, instead of the default log level WARN, you want to log all messages with level DEBUG and higher. Only for MyApp.MyNamespace.MyLogger, you want to restrict the level to INFO.\najaxAppender\nWith ajaxAppender, you add an additional appender of type AjaxAppender, which sends the log messages to a backend server.\nbrowserConsoleAppender\nWith browserConsoleAppender, it is possible to configure the BrowserConsoleAppender, which writes the log to the browser's console.\nlocalStorageAppender\nWith localStorageAppender, you add an additional appender of type AjaxAppender, which stores log messages in the local storage.\nmemoryAppender\nWith memoryAppender, it is possible to configure the MemoryAppender, which keeps log messages in the memory.\nAPI\nsee API documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        LoggingServiceModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
